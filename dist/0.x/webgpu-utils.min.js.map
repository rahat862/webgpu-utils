{"version":3,"file":"webgpu-utils.min.js","sources":["../../../src/utils.ts","../../../src/buffer-views.ts","../../src/3rdParty/wgsl_reflect/wgsl_reflect.module.js","../../../src/data-definitions.ts","../../../src/generate-mipmap.ts","../../../src/texture-utils.ts"],"sourcesContent":["export const roundUpToMultipleOf = (v: number, multiple: number) => (((v + multiple - 1) / multiple) | 0) * multiple;\n\n// TODO: fix better?\nexport const isTypedArray = (arr: any) =>\n    arr && typeof arr.length === 'number' && arr.buffer instanceof ArrayBuffer && typeof arr.byteLength === 'number';\n","import {\n    FieldDefinition,\n    IntrinsicDefinition,\n    StructDefinition,\n} from './data-definitions.js';\nimport {\n    roundUpToMultipleOf,\n    isTypedArray,\n} from './utils.js';\n\nexport type TypedArrayConstructor =\n    | Int8ArrayConstructor\n    | Uint8ArrayConstructor\n    | Int16ArrayConstructor\n    | Uint16ArrayConstructor\n    | Int32ArrayConstructor\n    | Uint32ArrayConstructor\n    | Float32ArrayConstructor\n    | Float64ArrayConstructor;\n\nexport type TypedArray =\n    | Int8Array\n    | Uint8Array\n    | Int16Array\n    | Uint16Array\n    | Int32Array\n    | Uint32Array\n    | Float32Array\n    | Float64Array;\n\nexport class TypedArrayViewGenerator {\n    arrayBuffer: ArrayBuffer;\n    byteOffset: number;\n\n    constructor(sizeInBytes: number) {\n        this.arrayBuffer = new ArrayBuffer(sizeInBytes);\n        this.byteOffset = 0;\n    }\n    align(alignment: number) {\n        this.byteOffset = roundUpToMultipleOf(this.byteOffset, alignment);\n    }\n    pad(numBytes: number) {\n        this.byteOffset += numBytes;\n    }\n    getView<T extends TypedArray>(Ctor: TypedArrayConstructor, numElements: number): T {\n        const view = new Ctor(this.arrayBuffer, this.byteOffset, numElements);\n        this.byteOffset += view.byteLength;\n        return view as T;\n    }\n}\n\n\n\ntype TypeDef = {\n    numElements: number;\n    align: number;\n    size: number;\n    type: string;\n    View: TypedArrayConstructor;\n    pad?: number[];\n};\n\nconst b: Record<string, TypeDef> = {\n  i32: { numElements: 1, align: 4, size: 4, type: 'i32', View: Int32Array },\n  u32: { numElements: 1, align: 4, size: 4, type: 'u32', View: Uint32Array },\n  f32: { numElements: 1, align: 4, size: 4, type: 'f32', View: Float32Array },\n  f16: { numElements: 1, align: 2, size: 2, type: 'u16', View: Uint16Array },\n\n  vec2f: { numElements: 2, align:  8, size:  8, type: 'f32', View: Float32Array },\n  vec2i: { numElements: 2, align:  8, size:  8, type: 'i32', View: Int32Array },\n  vec2u: { numElements: 2, align:  8, size:  8, type: 'u32', View: Uint32Array },\n  vec2h: { numElements: 2, align:  4, size:  4, type: 'u16', View: Uint16Array },\n  vec3i: { numElements: 3, align: 16, size: 12, type: 'i32', View: Int32Array },\n  vec3u: { numElements: 3, align: 16, size: 12, type: 'u32', View: Uint32Array },\n  vec3f: { numElements: 3, align: 16, size: 12, type: 'f32', View: Float32Array },\n  vec3h: { numElements: 3, align:  8, size:  6, type: 'u16', View: Uint16Array },\n  vec4i: { numElements: 4, align: 16, size: 16, type: 'i32', View: Int32Array },\n  vec4u: { numElements: 4, align: 16, size: 16, type: 'u32', View: Uint32Array },\n  vec4f: { numElements: 4, align: 16, size: 16, type: 'f32', View: Float32Array },\n  vec4h: { numElements: 4, align:  8, size:  8, type: 'u16', View: Uint16Array },\n\n  // AlignOf(vecR)\tSizeOf(array<vecR, C>)\n  mat2x2f: { numElements:  4, align:  8, size: 16,              type: 'f32', View: Float32Array },\n  mat2x2h: { numElements:  4, align:  4, size:  8,              type: 'u16', View: Uint16Array },\n  mat3x2f: { numElements:  6, align:  8, size: 24,              type: 'f32', View: Float32Array },\n  mat3x2h: { numElements:  6, align:  4, size: 12,              type: 'u16', View: Uint16Array },\n  mat4x2f: { numElements:  8, align:  8, size: 32,              type: 'f32', View: Float32Array },\n  mat4x2h: { numElements:  8, align:  4, size: 16,              type: 'u16', View: Uint16Array },\n  mat2x3f: { numElements:  8, align: 16, size: 32, pad: [3, 1], type: 'f32', View: Float32Array },\n  mat2x3h: { numElements:  8, align:  8, size: 16, pad: [3, 1], type: 'u16', View: Uint16Array },\n  mat3x3f: { numElements: 12, align: 16, size: 48, pad: [3, 1], type: 'f32', View: Float32Array },\n  mat3x3h: { numElements: 12, align:  8, size: 24, pad: [3, 1], type: 'u16', View: Uint16Array },\n  mat4x3f: { numElements: 16, align: 16, size: 64, pad: [3, 1], type: 'f32', View: Float32Array },\n  mat4x3h: { numElements: 16, align:  8, size: 32, pad: [3, 1], type: 'u16', View: Uint16Array },\n  mat2x4f: { numElements:  8, align: 16, size: 32,              type: 'f32', View: Float32Array },\n  mat2x4h: { numElements:  8, align:  8, size: 16,              type: 'u16', View: Uint16Array },\n  mat3x4f: { numElements: 12, align: 16, size: 48, pad: [3, 1], type: 'f32', View: Float32Array },\n  mat3x4h: { numElements: 12, align:  8, size: 24, pad: [3, 1], type: 'u16', View: Uint16Array },\n  mat4x4f: { numElements: 16, align: 16, size: 64,              type: 'f32', View: Float32Array },\n  mat4x4h: { numElements: 16, align:  8, size: 32,              type: 'u16', View: Uint16Array },\n};\n\nconst typeInfo: Record<string, TypeDef> = {\n  ...b,\n\n  'vec2<i32>': b.vec2f,\n  'vec2<u32>': b.vec2i,\n  'vec2<f32>': b.vec2u,\n  'vec2<f16>': b.vec2h,\n  'vec3<i32>': b.vec3i,\n  'vec3<u32>': b.vec3u,\n  'vec3<f32>': b.vec3f,\n  'vec3<f16>': b.vec3h,\n  'vec4<i32>': b.vec4i,\n  'vec4<u32>': b.vec4u,\n  'vec4<f32>': b.vec4f,\n  'vec4<f16>': b.vec4h,\n\n  'mat2x2<f32>': b.mat2x2f,\n  'mat2x2<f16>': b.mat2x2h,\n  'mat3x2<f32>': b.mat3x2f,\n  'mat3x2<f16>': b.mat3x2h,\n  'mat4x2<f32>': b.mat4x2f,\n  'mat4x2<f16>': b.mat4x2h,\n  'mat2x3<f32>': b.mat2x3f,\n  'mat2x3<f16>': b.mat2x3h,\n  'mat3x3<f32>': b.mat3x3f,\n  'mat3x3<f16>': b.mat3x3h,\n  'mat4x3<f32>': b.mat4x3f,\n  'mat4x3<f16>': b.mat4x3h,\n  'mat2x4<f32>': b.mat2x4f,\n  'mat2x4<f16>': b.mat2x4h,\n  'mat3x4<f32>': b.mat3x4f,\n  'mat3x4<f16>': b.mat3x4h,\n  'mat4x4<f32>': b.mat4x4f,\n  'mat4x4<f16>': b.mat4x4h,\n};\n\nexport type TypedArrayOrViews = TypedArray | Views | Views[];\nexport interface Views {\n  [x: string]: TypedArrayOrViews;\n}\nexport type ArrayBufferViews = {\n    views: TypedArrayOrViews;\n    arrayBuffer: ArrayBuffer;\n}\n\n// This needs to be fixed! ðŸ˜±\nfunction getSizeOfStructDef(fieldDef: FieldDefinition): number {\n  if (Array.isArray(fieldDef)) {\n    return fieldDef.length * getSizeOfStructDef(fieldDef[0]);\n  } else {\n    return fieldDef.size;\n  }\n}\n\n/**\n * Creates a set of named TypedArray views on an ArrayBuffer\n * @param structDef Definition of the various types of views.\n * @param arrayBuffer Optional ArrayBuffer to use (if one provided one will be created)\n * @param offset Optional offset in existing ArrayBuffer to start the views.\n * @returns A bunch of named TypedArray views and the ArrayBuffer\n */\nexport function makeTypedArrayViews(structDef: StructDefinition, arrayBuffer?: ArrayBuffer, offset?: number): ArrayBufferViews {\n    const baseOffset = offset || 0;\n    const buffer = arrayBuffer || new ArrayBuffer(getSizeOfStructDef(structDef));\n\n    const makeViews = (structDef: FieldDefinition): TypedArrayOrViews => {\n        if (Array.isArray(structDef)) {\n            return (structDef as StructDefinition[]).map(elemDef => makeViews(elemDef)) as Views[];\n        } else if (typeof structDef === 'string') {\n            throw Error('unreachable');\n        } else {\n            const fields = (structDef as StructDefinition).fields;\n            if (fields) {\n                const views: Views = {};\n                for (const [name, def] of Object.entries(fields)) {\n                    views[name] = makeViews(def as StructDefinition);\n                }\n                return views;\n            } else {\n                const { size, offset, type } = structDef as IntrinsicDefinition;\n              try {\n                const { View } = typeInfo[type];\n                const numElements = size / View.BYTES_PER_ELEMENT;\n                return new View(buffer, baseOffset + offset, numElements);\n              } catch {\n                throw new Error(`unknown type: ${type}`);\n              }\n            }\n        }\n    };\n    return { views: makeViews(structDef), arrayBuffer: buffer };\n}\n\n/**\n * Given a set of TypeArrayViews and matching JavaScript data\n * sets the content of the views.\n * @param data The new values\n * @param views TypedArray views as returned from {@link makeTypedArrayViews}\n */\nexport function setStructuredView(data: any, views: TypedArrayOrViews): void {\n    if (data === undefined) {\n        return;\n    } else if (isTypedArray(views)) {\n        const view = views as TypedArray;\n        if (view.length === 1 && typeof data === 'number') {\n            view[0] = data;\n        } else {\n            if (Array.isArray(data[0]) || isTypedArray(data[0])) {\n                // complete hack!\n                // there's no type data here so let's guess based on the user's data\n                const dataLen = data[0].length;\n                const stride = dataLen == 3 ? 4 : dataLen;\n                for (let i = 0; i < data.length; ++i) {\n                    const offset = i * stride;\n                    view.set(data[i], offset);\n                }\n            } else {\n                view.set(data as number[]);\n            }\n        }\n    } else if (Array.isArray(views)) {\n        const asArray = views as Views[];\n        (data as any[]).forEach((newValue, ndx) => {\n            setStructuredView(newValue, asArray[ndx]);\n        });\n    } else {\n        const asViews = views as Views;\n        for (const [key, newValue] of Object.entries(data)) {\n            const view = asViews[key];\n            if (view) {\n                setStructuredView(newValue, view);\n            }\n        }\n    }\n}\n\nexport type StructuredView = ArrayBufferViews & {\n    /**\n     * Sets the contents of the TypedArrays based on the data passed in\n     * Note: The data may be sparse\n     *\n     * example:\n     *\n     * ```js\n     * const code = `\n     * struct HSL {\n     *   hue: f32,\n     *   sat: f32,\n     *   lum: f32,\n     * };\n     * struct MyUniforms {\n     *    colors: array<HSL, 4>,\n     *    brightness: f32,\n     *    kernel: array<f32, 9>,\n     * };\n     * @group(0) @binding(0) var<uniform> myUniforms: MyUniforms;\n     * `;\n     * const defs = makeShaderDataDefinitions(code);\n     * const myUniformValues = makeStructuredView(defs.uniforms.myUniforms);\n     *\n     * myUniformValues.set({\n     *   colors: [\n     *     ,\n     *     ,\n     *     { hue: 0.5, sat: 1.0, lum: 0.5 },  // only set the 3rd color\n     *   ],\n     *   brightness: 0.8,\n     *   kernel: [\n     *      1, 0, -1,\n     *      2, 0, -2,\n     *      1, 0, -1,\n     *   ],\n     * });\n     * ```\n     *\n     * @param data\n     */\n    set(data: any): void;\n}\n\n/**\n * Given a StructDefinition, create matching TypedArray views\n * @param structDef A StructDefinition as returned from {@link makeShaderDataDefinitions}\n * @param arrayBuffer Optional ArrayBuffer for the views\n * @param offset Optional offset into the ArrayBuffer for the views\n * @returns TypedArray views for the various named fields of the structure as well\n *    as a `set` function to make them easy to set, and the arrayBuffer\n */\nexport function makeStructuredView(structDef: StructDefinition, arrayBuffer?: ArrayBuffer, offset = 0): StructuredView {\n    const views = makeTypedArrayViews(structDef, arrayBuffer, offset);\n    return {\n        ...views,\n        set(data: any) {\n            setStructuredView(data, views.views);\n        },\n    };\n}\n\ntype ViewsByCtor = Map<TypedArrayConstructor, TypedArray>;\nconst s_views = new WeakMap<ArrayBuffer, ViewsByCtor>();\n\nfunction getViewsByCtor(arrayBuffer: ArrayBuffer): ViewsByCtor {\n    let viewsByCtor = s_views.get(arrayBuffer);\n    if (!viewsByCtor) {\n        viewsByCtor = new Map();\n        s_views.set(arrayBuffer, viewsByCtor);\n    }\n    return viewsByCtor;\n}\n\nfunction getView<T extends TypedArray>(arrayBuffer: ArrayBuffer, Ctor: TypedArrayConstructor): T {\n    const viewsByCtor = getViewsByCtor(arrayBuffer);\n    let view = viewsByCtor.get(Ctor);\n    if (!view) {\n        view = new Ctor(arrayBuffer);\n        viewsByCtor.set(Ctor, view);\n    }\n    return view as T;\n}\n\nexport function setStructuredValues(fieldDef: FieldDefinition, data: any, arrayBuffer: ArrayBuffer, offset = 0) {\n    const asIntrinsicDefinition = fieldDef as IntrinsicDefinition;\n    if (asIntrinsicDefinition.type) {\n        const type = typeInfo[asIntrinsicDefinition.type];\n        const view = getView(arrayBuffer, type.View);\n        const index = (offset + asIntrinsicDefinition.offset) / view.BYTES_PER_ELEMENT;\n        if (typeof data === 'number') {\n            view[index] = data;\n        } else {\n            view.set(data, index);\n        }\n    } else if (Array.isArray(fieldDef)) {\n        // It's IntrinsicDefinition[] or StructDefinition[]\n        data.forEach((newValue: any, ndx: number) => {\n            setStructuredValues(fieldDef[ndx], newValue, arrayBuffer, offset);\n        });\n    } else {\n        // It's StructDefinition\n        const asStructDefinition = fieldDef as StructDefinition;\n        for (const [key, newValue] of Object.entries(data)) {\n            const fieldDef = asStructDefinition.fields[key];\n            if (fieldDef) {\n                setStructuredValues(fieldDef, newValue, arrayBuffer, offset);\n            }\n        }\n    }\n}","/**\n * @class Node\n * @category AST\n * Base class for AST nodes parsed from a WGSL shader.\n */\nclass Node {\n    constructor() { }\n    get isAstNode() {\n        return true;\n    }\n    get astNodeType() {\n        return \"\";\n    }\n    evaluate() {\n        throw new Error(\"Cannot evaluate node\");\n    }\n}\n/**\n * @class Statement\n * @extends Node\n * @category AST\n */\nclass Statement extends Node {\n    constructor() {\n        super();\n    }\n}\n/**\n * @class Function\n * @extends Statement\n * @category AST\n */\nclass Function extends Statement {\n    constructor(name, args, returnType, body) {\n        super();\n        this.name = name;\n        this.args = args;\n        this.returnType = returnType;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"function\";\n    }\n}\n/**\n * @class StaticAssert\n * @extends Statement\n * @category AST\n */\nclass StaticAssert extends Statement {\n    constructor(expression) {\n        super();\n        this.expression = expression;\n    }\n    get astNodeType() {\n        return \"staticAssert\";\n    }\n}\n/**\n * @class While\n * @extends Statement\n * @category AST\n */\nclass While extends Statement {\n    constructor(condition, body) {\n        super();\n        this.condition = condition;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"while\";\n    }\n}\n/**\n * @class For\n * @extends Statement\n * @category AST\n */\nclass For extends Statement {\n    constructor(init, condition, increment, body) {\n        super();\n        this.init = init;\n        this.condition = condition;\n        this.increment = increment;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"for\";\n    }\n}\n/**\n * @class Var\n * @extends Statement\n * @category AST\n */\nclass Var extends Statement {\n    constructor(name, type, storage, access, value) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.storage = storage;\n        this.access = access;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"var\";\n    }\n}\n/**\n * @class Let\n * @extends Statement\n * @category AST\n */\nclass Let extends Statement {\n    constructor(name, type, storage, access, value) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.storage = storage;\n        this.access = access;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"let\";\n    }\n}\n/**\n * @class Const\n * @extends Statement\n * @category AST\n */\nclass Const extends Statement {\n    constructor(name, type, storage, access, value) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.storage = storage;\n        this.access = access;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"const\";\n    }\n    evaluate() {\n        return this.value.evaluate();\n    }\n}\nvar IncrementOperator;\n(function (IncrementOperator) {\n    IncrementOperator[\"increment\"] = \"++\";\n    IncrementOperator[\"decrement\"] = \"--\";\n})(IncrementOperator || (IncrementOperator = {}));\n(function (IncrementOperator) {\n    function parse(val) {\n        const key = val;\n        if (key == \"parse\")\n            throw new Error(\"Invalid value for IncrementOperator\");\n        return IncrementOperator[key];\n    }\n    IncrementOperator.parse = parse;\n})(IncrementOperator || (IncrementOperator = {}));\n/**\n * @class Increment\n * @extends Statement\n * @category AST\n */\nclass Increment extends Statement {\n    constructor(operator, variable) {\n        super();\n        this.operator = operator;\n        this.variable = variable;\n    }\n    get astNodeType() {\n        return \"increment\";\n    }\n}\nvar AssignOperator;\n(function (AssignOperator) {\n    AssignOperator[\"assign\"] = \"=\";\n    AssignOperator[\"addAssign\"] = \"+=\";\n    AssignOperator[\"subtractAssin\"] = \"-=\";\n    AssignOperator[\"multiplyAssign\"] = \"*=\";\n    AssignOperator[\"divideAssign\"] = \"/=\";\n    AssignOperator[\"moduloAssign\"] = \"%=\";\n    AssignOperator[\"andAssign\"] = \"&=\";\n    AssignOperator[\"orAssign\"] = \"|=\";\n    AssignOperator[\"xorAssign\"] = \"^=\";\n    AssignOperator[\"shiftLeftAssign\"] = \"<<=\";\n    AssignOperator[\"shiftRightAssign\"] = \">>=\";\n})(AssignOperator || (AssignOperator = {}));\n(function (AssignOperator) {\n    function parse(val) {\n        const key = val;\n        if (key == \"parse\")\n            throw new Error(\"Invalid value for AssignOperator\");\n        return AssignOperator[key];\n    }\n    AssignOperator.parse = parse;\n})(AssignOperator || (AssignOperator = {}));\n/**\n * @class Assign\n * @extends Statement\n * @category AST\n */\nclass Assign extends Statement {\n    constructor(operator, variable, value) {\n        super();\n        this.operator = operator;\n        this.variable = variable;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"assign\";\n    }\n}\n/**\n * @class Call\n * @extends Statement\n * @category AST\n */\nclass Call extends Statement {\n    constructor(name, args) {\n        super();\n        this.name = name;\n        this.args = args;\n    }\n    get astNodeType() {\n        return \"call\";\n    }\n}\n/**\n * @class Loop\n * @extends Statement\n * @category AST\n */\nclass Loop extends Statement {\n    constructor(body, continuing) {\n        super();\n        this.body = body;\n        this.continuing = continuing;\n    }\n    get astNodeType() {\n        return \"loop\";\n    }\n}\n/**\n * @class Switch\n * @extends Statement\n * @category AST\n */\nclass Switch extends Statement {\n    constructor(condition, body) {\n        super();\n        this.condition = condition;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"body\";\n    }\n}\n/**\n * @class If\n * @extends Statement\n * @category AST\n */\nclass If extends Statement {\n    constructor(condition, body, elseif, _else) {\n        super();\n        this.condition = condition;\n        this.body = body;\n        this.elseif = elseif;\n        this.else = _else;\n    }\n    get astNodeType() {\n        return \"if\";\n    }\n}\n/**\n * @class Return\n * @extends Statement\n * @category AST\n */\nclass Return extends Statement {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"return\";\n    }\n}\n/**\n * @class Struct\n * @extends Statement\n * @category AST\n */\nclass Struct extends Statement {\n    constructor(name, members) {\n        super();\n        this.name = name;\n        this.members = members;\n    }\n    get astNodeType() {\n        return \"struct\";\n    }\n}\n/**\n * @class Enable\n * @extends Statement\n * @category AST\n */\nclass Enable extends Statement {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    get astNodeType() {\n        return \"enable\";\n    }\n}\n/**\n * @class Alias\n * @extends Statement\n * @category AST\n */\nclass Alias extends Statement {\n    constructor(name, type) {\n        super();\n        this.name = name;\n        this.type = type;\n    }\n    get astNodeType() {\n        return \"alias\";\n    }\n}\n/**\n * @class Discard\n * @extends Statement\n * @category AST\n */\nclass Discard extends Statement {\n    constructor() {\n        super();\n    }\n    get astNodeType() {\n        return \"discard\";\n    }\n}\n/**\n * @class Break\n * @extends Statement\n * @category AST\n */\nclass Break extends Statement {\n    constructor() {\n        super();\n    }\n    get astNodeType() {\n        return \"break\";\n    }\n}\n/**\n * @class Continue\n * @extends Statement\n * @category AST\n */\nclass Continue extends Statement {\n    constructor() {\n        super();\n    }\n    get astNodeType() {\n        return \"continue\";\n    }\n}\n/**\n * @class Type\n * @extends Node\n * @category AST\n */\nclass Type extends Node {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    get astNodeType() {\n        return \"type\";\n    }\n}\n/**\n * @class TemplateType\n * @extends Type\n * @category AST\n */\nclass TemplateType extends Type {\n    constructor(name, format, access) {\n        super(name);\n        this.format = format;\n        this.access = access;\n    }\n    get astNodeType() {\n        return \"template\";\n    }\n}\n/**\n * @class PointerType\n * @extends Type\n * @category AST\n */\nclass PointerType extends Type {\n    constructor(name, storage, type, access) {\n        super(name);\n        this.storage = storage;\n        this.type = type;\n        this.access = access;\n    }\n    get astNodeType() {\n        return \"pointer\";\n    }\n}\n/**\n * @class ArrayType\n * @extends Type\n * @category AST\n */\nclass ArrayType extends Type {\n    constructor(name, attributes, format, count) {\n        super(name);\n        this.attributes = attributes;\n        this.format = format;\n        this.count = count;\n    }\n    get astNodeType() {\n        return \"array\";\n    }\n}\n/**\n * @class SamplerType\n * @extends Type\n * @category AST\n */\nclass SamplerType extends Type {\n    constructor(name, format, access) {\n        super(name);\n        this.format = format;\n        this.access = access;\n    }\n    get astNodeType() {\n        return \"sampler\";\n    }\n}\n/**\n * @class Expression\n * @extends Node\n * @category AST\n */\nclass Expression extends Node {\n    constructor() {\n        super();\n    }\n}\n/**\n * @class StringExpr\n * @extends Expression\n * @category AST\n */\nclass StringExpr extends Expression {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"stringExpr\";\n    }\n    toString() {\n        return this.value;\n    }\n}\n/**\n * @class CreateExpr\n * @extends Expression\n * @category AST\n */\nclass CreateExpr extends Expression {\n    constructor(type, args) {\n        super();\n        this.type = type;\n        this.args = args;\n    }\n    get astNodeType() {\n        return \"createExpr\";\n    }\n}\n/**\n * @class CallExpr\n * @extends Expression\n * @category AST\n */\nclass CallExpr extends Expression {\n    constructor(name, args) {\n        super();\n        this.name = name;\n        this.args = args;\n    }\n    get astNodeType() {\n        return \"callExpr\";\n    }\n    evaluate() {\n        switch (this.name) {\n            case \"sin\":\n                return Math.sin(this.args[0].evaluate());\n            case \"cos\":\n                return Math.cos(this.args[0].evaluate());\n            case \"tan\":\n                return Math.tan(this.args[0].evaluate());\n            case \"asin\":\n                return Math.asin(this.args[0].evaluate());\n            case \"acos\":\n                return Math.acos(this.args[0].evaluate());\n            case \"atan\":\n                return Math.atan(this.args[0].evaluate());\n            case \"radians\":\n                return (this.args[0].evaluate() * Math.PI) / 180;\n            case \"degrees\":\n                return (this.args[0].evaluate() * 180) / Math.PI;\n            default:\n                throw new Error(\"Non const function: \" + this.name);\n        }\n    }\n}\n/**\n * @class VariableExpr\n * @extends Expression\n * @category AST\n */\nclass VariableExpr extends Expression {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    get astNodeType() {\n        return \"varExpr\";\n    }\n}\n/**\n * @class ConstExpr\n * @extends Expression\n * @category AST\n */\nclass ConstExpr extends Expression {\n    constructor(name, value) {\n        super();\n        this.name = name;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"constExpr\";\n    }\n    evaluate() {\n        return this.value;\n    }\n}\n/**\n * @class LiteralExpr\n * @extends Expression\n * @category AST\n */\nclass LiteralExpr extends Expression {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"literalExpr\";\n    }\n    evaluate() {\n        return this.value;\n    }\n}\n/**\n * @class BitcastExpr\n * @extends Expression\n * @category AST\n */\nclass BitcastExpr extends Expression {\n    constructor(type, value) {\n        super();\n        this.type = type;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"bitcastExpr\";\n    }\n}\n/**\n * @class TypecastExpr\n * @extends Expression\n * @category AST\n */\nclass TypecastExpr extends Expression {\n    constructor(type, args) {\n        super();\n        this.type = type;\n        this.args = args;\n    }\n    get astNodeType() {\n        return \"typecastExpr\";\n    }\n    evaluate() {\n        return this.args[0].evaluate();\n    }\n}\n/**\n * @class GroupingExpr\n * @extends Expression\n * @category AST\n */\nclass GroupingExpr extends Expression {\n    constructor(contents) {\n        super();\n        this.contents = contents;\n    }\n    get astNodeType() {\n        return \"groupExpr\";\n    }\n    evaluate() {\n        return this.contents[0].evaluate();\n    }\n}\n/**\n * @class Operator\n * @extends Expression\n * @category AST\n */\nclass Operator extends Expression {\n    constructor() {\n        super();\n    }\n}\n/**\n * @class UnaryOperator\n * @extends Operator\n * @category AST\n * @property {string} operator +, -, !, ~\n */\nclass UnaryOperator extends Operator {\n    constructor(operator, right) {\n        super();\n        this.operator = operator;\n        this.right = right;\n    }\n    get astNodeType() {\n        return \"unaryOp\";\n    }\n    evaluate() {\n        switch (this.operator) {\n            case \"+\":\n                return this.right.evaluate();\n            case \"-\":\n                return -this.right.evaluate();\n            case \"!\":\n                return this.right.evaluate() ? 0 : 1;\n            case \"~\":\n                return ~this.right.evaluate();\n            default:\n                throw new Error(\"Unknown unary operator: \" + this.operator);\n        }\n    }\n}\n/**\n * @class BinaryOperator\n * @extends Operator\n * @category AST\n * @property {string} operator +, -, *, /, %, ==, !=, <, >, <=, >=, &&, ||\n */\nclass BinaryOperator extends Operator {\n    constructor(operator, left, right) {\n        super();\n        this.operator = operator;\n        this.left = left;\n        this.right = right;\n    }\n    get astNodeType() {\n        return \"binaryOp\";\n    }\n    evaluate() {\n        switch (this.operator) {\n            case \"+\":\n                return this.left.evaluate() + this.right.evaluate();\n            case \"-\":\n                return this.left.evaluate() - this.right.evaluate();\n            case \"*\":\n                return this.left.evaluate() * this.right.evaluate();\n            case \"/\":\n                return this.left.evaluate() / this.right.evaluate();\n            case \"%\":\n                return this.left.evaluate() % this.right.evaluate();\n            case \"==\":\n                return this.left.evaluate() == this.right.evaluate() ? 1 : 0;\n            case \"!=\":\n                return this.left.evaluate() != this.right.evaluate() ? 1 : 0;\n            case \"<\":\n                return this.left.evaluate() < this.right.evaluate() ? 1 : 0;\n            case \">\":\n                return this.left.evaluate() > this.right.evaluate() ? 1 : 0;\n            case \"<=\":\n                return this.left.evaluate() <= this.right.evaluate() ? 1 : 0;\n            case \">=\":\n                return this.left.evaluate() >= this.right.evaluate() ? 1 : 0;\n            case \"&&\":\n                return this.left.evaluate() && this.right.evaluate() ? 1 : 0;\n            case \"||\":\n                return this.left.evaluate() || this.right.evaluate() ? 1 : 0;\n            default:\n                throw new Error(`Unknown operator ${this.operator}`);\n        }\n    }\n}\n/**\n * @class SwitchCase\n * @extends Node\n * @category AST\n */\nclass SwitchCase extends Node {\n    constructor() {\n        super();\n    }\n}\n/**\n * @class Case\n * @extends SwitchCase\n * @category AST\n */\nclass Case extends SwitchCase {\n    constructor(selector, body) {\n        super();\n        this.selector = selector;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"case\";\n    }\n}\n/**\n * @class Default\n * @extends SwitchCase\n * @category AST\n */\nclass Default extends SwitchCase {\n    constructor(body) {\n        super();\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"default\";\n    }\n}\n/**\n * @class Argument\n * @extends Node\n * @category AST\n */\nclass Argument extends Node {\n    constructor(name, type, attributes) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.attributes = attributes;\n    }\n    get astNodeType() {\n        return \"argument\";\n    }\n}\n/**\n * @class ElseIf\n * @extends Node\n * @category AST\n */\nclass ElseIf extends Node {\n    constructor(condition, body) {\n        super();\n        this.condition = condition;\n        this.body = body;\n    }\n    get astNodeType() {\n        return \"elseif\";\n    }\n}\n/**\n * @class Member\n * @extends Node\n * @category AST\n */\nclass Member extends Node {\n    constructor(name, type, attributes) {\n        super();\n        this.name = name;\n        this.type = type;\n        this.attributes = attributes;\n    }\n    get astNodeType() {\n        return \"member\";\n    }\n}\n/**\n * @class Attribute\n * @extends Node\n * @category AST\n */\nclass Attribute extends Node {\n    constructor(name, value) {\n        super();\n        this.name = name;\n        this.value = value;\n    }\n    get astNodeType() {\n        return \"attribute\";\n    }\n}\n\nvar _a;\nvar TokenClass;\n(function (TokenClass) {\n    TokenClass[TokenClass[\"token\"] = 0] = \"token\";\n    TokenClass[TokenClass[\"keyword\"] = 1] = \"keyword\";\n    TokenClass[TokenClass[\"reserved\"] = 2] = \"reserved\";\n})(TokenClass || (TokenClass = {}));\nclass TokenType {\n    constructor(name, type, rule) {\n        this.name = name;\n        this.type = type;\n        this.rule = rule;\n    }\n    toString() {\n        return this.name;\n    }\n}\n/// Catalog of defined token types, keywords, and reserved words.\nclass TokenTypes {\n}\n_a = TokenTypes;\nTokenTypes.none = new TokenType(\"\", TokenClass.reserved, \"\");\nTokenTypes.eof = new TokenType(\"EOF\", TokenClass.token, \"\");\nTokenTypes.reserved = {\n    asm: new TokenType(\"asm\", TokenClass.reserved, \"asm\"),\n    bf16: new TokenType(\"bf16\", TokenClass.reserved, \"bf16\"),\n    do: new TokenType(\"do\", TokenClass.reserved, \"do\"),\n    enum: new TokenType(\"enum\", TokenClass.reserved, \"enum\"),\n    f16: new TokenType(\"f16\", TokenClass.reserved, \"f16\"),\n    f64: new TokenType(\"f64\", TokenClass.reserved, \"f64\"),\n    handle: new TokenType(\"handle\", TokenClass.reserved, \"handle\"),\n    i8: new TokenType(\"i8\", TokenClass.reserved, \"i8\"),\n    i16: new TokenType(\"i16\", TokenClass.reserved, \"i16\"),\n    i64: new TokenType(\"i64\", TokenClass.reserved, \"i64\"),\n    mat: new TokenType(\"mat\", TokenClass.reserved, \"mat\"),\n    premerge: new TokenType(\"premerge\", TokenClass.reserved, \"premerge\"),\n    regardless: new TokenType(\"regardless\", TokenClass.reserved, \"regardless\"),\n    typedef: new TokenType(\"typedef\", TokenClass.reserved, \"typedef\"),\n    u8: new TokenType(\"u8\", TokenClass.reserved, \"u8\"),\n    u16: new TokenType(\"u16\", TokenClass.reserved, \"u16\"),\n    u64: new TokenType(\"u64\", TokenClass.reserved, \"u64\"),\n    unless: new TokenType(\"unless\", TokenClass.reserved, \"unless\"),\n    using: new TokenType(\"using\", TokenClass.reserved, \"using\"),\n    vec: new TokenType(\"vec\", TokenClass.reserved, \"vec\"),\n    void: new TokenType(\"void\", TokenClass.reserved, \"void\"),\n};\nTokenTypes.keywords = {\n    array: new TokenType(\"array\", TokenClass.keyword, \"array\"),\n    atomic: new TokenType(\"atomic\", TokenClass.keyword, \"atomic\"),\n    bool: new TokenType(\"bool\", TokenClass.keyword, \"bool\"),\n    f32: new TokenType(\"f32\", TokenClass.keyword, \"f32\"),\n    i32: new TokenType(\"i32\", TokenClass.keyword, \"i32\"),\n    mat2x2: new TokenType(\"mat2x2\", TokenClass.keyword, \"mat2x2\"),\n    mat2x3: new TokenType(\"mat2x3\", TokenClass.keyword, \"mat2x3\"),\n    mat2x4: new TokenType(\"mat2x4\", TokenClass.keyword, \"mat2x4\"),\n    mat3x2: new TokenType(\"mat3x2\", TokenClass.keyword, \"mat3x2\"),\n    mat3x3: new TokenType(\"mat3x3\", TokenClass.keyword, \"mat3x3\"),\n    mat3x4: new TokenType(\"mat3x4\", TokenClass.keyword, \"mat3x4\"),\n    mat4x2: new TokenType(\"mat4x2\", TokenClass.keyword, \"mat4x2\"),\n    mat4x3: new TokenType(\"mat4x3\", TokenClass.keyword, \"mat4x3\"),\n    mat4x4: new TokenType(\"mat4x4\", TokenClass.keyword, \"mat4x4\"),\n    ptr: new TokenType(\"ptr\", TokenClass.keyword, \"ptr\"),\n    sampler: new TokenType(\"sampler\", TokenClass.keyword, \"sampler\"),\n    sampler_comparison: new TokenType(\"sampler_comparison\", TokenClass.keyword, \"sampler_comparison\"),\n    struct: new TokenType(\"struct\", TokenClass.keyword, \"struct\"),\n    texture_1d: new TokenType(\"texture_1d\", TokenClass.keyword, \"texture_1d\"),\n    texture_2d: new TokenType(\"texture_2d\", TokenClass.keyword, \"texture_2d\"),\n    texture_2d_array: new TokenType(\"texture_2d_array\", TokenClass.keyword, \"texture_2d_array\"),\n    texture_3d: new TokenType(\"texture_3d\", TokenClass.keyword, \"texture_3d\"),\n    texture_cube: new TokenType(\"texture_cube\", TokenClass.keyword, \"texture_cube\"),\n    texture_cube_array: new TokenType(\"texture_cube_array\", TokenClass.keyword, \"texture_cube_array\"),\n    texture_multisampled_2d: new TokenType(\"texture_multisampled_2d\", TokenClass.keyword, \"texture_multisampled_2d\"),\n    texture_storage_1d: new TokenType(\"texture_storage_1d\", TokenClass.keyword, \"texture_storage_1d\"),\n    texture_storage_2d: new TokenType(\"texture_storage_2d\", TokenClass.keyword, \"texture_storage_2d\"),\n    texture_storage_2d_array: new TokenType(\"texture_storage_2d_array\", TokenClass.keyword, \"texture_storage_2d_array\"),\n    texture_storage_3d: new TokenType(\"texture_storage_3d\", TokenClass.keyword, \"texture_storage_3d\"),\n    texture_depth_2d: new TokenType(\"texture_depth_2d\", TokenClass.keyword, \"texture_depth_2d\"),\n    texture_depth_2d_array: new TokenType(\"texture_depth_2d_array\", TokenClass.keyword, \"texture_depth_2d_array\"),\n    texture_depth_cube: new TokenType(\"texture_depth_cube\", TokenClass.keyword, \"texture_depth_cube\"),\n    texture_depth_cube_array: new TokenType(\"texture_depth_cube_array\", TokenClass.keyword, \"texture_depth_cube_array\"),\n    texture_depth_multisampled_2d: new TokenType(\"texture_depth_multisampled_2d\", TokenClass.keyword, \"texture_depth_multisampled_2d\"),\n    u32: new TokenType(\"u32\", TokenClass.keyword, \"u32\"),\n    vec2: new TokenType(\"vec2\", TokenClass.keyword, \"vec2\"),\n    vec3: new TokenType(\"vec3\", TokenClass.keyword, \"vec3\"),\n    vec4: new TokenType(\"vec4\", TokenClass.keyword, \"vec4\"),\n    bitcast: new TokenType(\"bitcast\", TokenClass.keyword, \"bitcast\"),\n    block: new TokenType(\"block\", TokenClass.keyword, \"block\"),\n    break: new TokenType(\"break\", TokenClass.keyword, \"break\"),\n    case: new TokenType(\"case\", TokenClass.keyword, \"case\"),\n    continue: new TokenType(\"continue\", TokenClass.keyword, \"continue\"),\n    continuing: new TokenType(\"continuing\", TokenClass.keyword, \"continuing\"),\n    default: new TokenType(\"default\", TokenClass.keyword, \"default\"),\n    discard: new TokenType(\"discard\", TokenClass.keyword, \"discard\"),\n    else: new TokenType(\"else\", TokenClass.keyword, \"else\"),\n    elseif: new TokenType(\"elseif\", TokenClass.keyword, \"elseif\"),\n    enable: new TokenType(\"enable\", TokenClass.keyword, \"enable\"),\n    fallthrough: new TokenType(\"fallthrough\", TokenClass.keyword, \"fallthrough\"),\n    false: new TokenType(\"false\", TokenClass.keyword, \"false\"),\n    fn: new TokenType(\"fn\", TokenClass.keyword, \"fn\"),\n    for: new TokenType(\"for\", TokenClass.keyword, \"for\"),\n    function: new TokenType(\"function\", TokenClass.keyword, \"function\"),\n    if: new TokenType(\"if\", TokenClass.keyword, \"if\"),\n    let: new TokenType(\"let\", TokenClass.keyword, \"let\"),\n    const: new TokenType(\"const\", TokenClass.keyword, \"const\"),\n    loop: new TokenType(\"loop\", TokenClass.keyword, \"loop\"),\n    while: new TokenType(\"while\", TokenClass.keyword, \"while\"),\n    private: new TokenType(\"private\", TokenClass.keyword, \"private\"),\n    read: new TokenType(\"read\", TokenClass.keyword, \"read\"),\n    read_write: new TokenType(\"read_write\", TokenClass.keyword, \"read_write\"),\n    return: new TokenType(\"return\", TokenClass.keyword, \"return\"),\n    storage: new TokenType(\"storage\", TokenClass.keyword, \"storage\"),\n    switch: new TokenType(\"switch\", TokenClass.keyword, \"switch\"),\n    true: new TokenType(\"true\", TokenClass.keyword, \"true\"),\n    alias: new TokenType(\"alias\", TokenClass.keyword, \"alias\"),\n    type: new TokenType(\"type\", TokenClass.keyword, \"type\"),\n    uniform: new TokenType(\"uniform\", TokenClass.keyword, \"uniform\"),\n    var: new TokenType(\"var\", TokenClass.keyword, \"var\"),\n    workgroup: new TokenType(\"workgroup\", TokenClass.keyword, \"workgroup\"),\n    write: new TokenType(\"write\", TokenClass.keyword, \"write\"),\n    r8unorm: new TokenType(\"r8unorm\", TokenClass.keyword, \"r8unorm\"),\n    r8snorm: new TokenType(\"r8snorm\", TokenClass.keyword, \"r8snorm\"),\n    r8uint: new TokenType(\"r8uint\", TokenClass.keyword, \"r8uint\"),\n    r8sint: new TokenType(\"r8sint\", TokenClass.keyword, \"r8sint\"),\n    r16uint: new TokenType(\"r16uint\", TokenClass.keyword, \"r16uint\"),\n    r16sint: new TokenType(\"r16sint\", TokenClass.keyword, \"r16sint\"),\n    r16float: new TokenType(\"r16float\", TokenClass.keyword, \"r16float\"),\n    rg8unorm: new TokenType(\"rg8unorm\", TokenClass.keyword, \"rg8unorm\"),\n    rg8snorm: new TokenType(\"rg8snorm\", TokenClass.keyword, \"rg8snorm\"),\n    rg8uint: new TokenType(\"rg8uint\", TokenClass.keyword, \"rg8uint\"),\n    rg8sint: new TokenType(\"rg8sint\", TokenClass.keyword, \"rg8sint\"),\n    r32uint: new TokenType(\"r32uint\", TokenClass.keyword, \"r32uint\"),\n    r32sint: new TokenType(\"r32sint\", TokenClass.keyword, \"r32sint\"),\n    r32float: new TokenType(\"r32float\", TokenClass.keyword, \"r32float\"),\n    rg16uint: new TokenType(\"rg16uint\", TokenClass.keyword, \"rg16uint\"),\n    rg16sint: new TokenType(\"rg16sint\", TokenClass.keyword, \"rg16sint\"),\n    rg16float: new TokenType(\"rg16float\", TokenClass.keyword, \"rg16float\"),\n    rgba8unorm: new TokenType(\"rgba8unorm\", TokenClass.keyword, \"rgba8unorm\"),\n    rgba8unorm_srgb: new TokenType(\"rgba8unorm_srgb\", TokenClass.keyword, \"rgba8unorm_srgb\"),\n    rgba8snorm: new TokenType(\"rgba8snorm\", TokenClass.keyword, \"rgba8snorm\"),\n    rgba8uint: new TokenType(\"rgba8uint\", TokenClass.keyword, \"rgba8uint\"),\n    rgba8sint: new TokenType(\"rgba8sint\", TokenClass.keyword, \"rgba8sint\"),\n    bgra8unorm: new TokenType(\"bgra8unorm\", TokenClass.keyword, \"bgra8unorm\"),\n    bgra8unorm_srgb: new TokenType(\"bgra8unorm_srgb\", TokenClass.keyword, \"bgra8unorm_srgb\"),\n    rgb10a2unorm: new TokenType(\"rgb10a2unorm\", TokenClass.keyword, \"rgb10a2unorm\"),\n    rg11b10float: new TokenType(\"rg11b10float\", TokenClass.keyword, \"rg11b10float\"),\n    rg32uint: new TokenType(\"rg32uint\", TokenClass.keyword, \"rg32uint\"),\n    rg32sint: new TokenType(\"rg32sint\", TokenClass.keyword, \"rg32sint\"),\n    rg32float: new TokenType(\"rg32float\", TokenClass.keyword, \"rg32float\"),\n    rgba16uint: new TokenType(\"rgba16uint\", TokenClass.keyword, \"rgba16uint\"),\n    rgba16sint: new TokenType(\"rgba16sint\", TokenClass.keyword, \"rgba16sint\"),\n    rgba16float: new TokenType(\"rgba16float\", TokenClass.keyword, \"rgba16float\"),\n    rgba32uint: new TokenType(\"rgba32uint\", TokenClass.keyword, \"rgba32uint\"),\n    rgba32sint: new TokenType(\"rgba32sint\", TokenClass.keyword, \"rgba32sint\"),\n    rgba32float: new TokenType(\"rgba32float\", TokenClass.keyword, \"rgba32float\"),\n    static_assert: new TokenType(\"static_assert\", TokenClass.keyword, \"static_assert\"),\n    // WGSL grammar has a few keywords that have different token names than the strings they\n    // represent. Aliasing them here.\n    /*int32: new TokenType(\"i32\", TokenClass.keyword, \"i32\"),\n        uint32: new TokenType(\"u32\", TokenClass.keyword, \"u32\"),\n        float32: new TokenType(\"f32\", TokenClass.keyword, \"f32\"),\n        pointer: new TokenType(\"ptr\", TokenClass.keyword, \"ptr\"),*/\n};\nTokenTypes.tokens = {\n    decimal_float_literal: new TokenType(\"decimal_float_literal\", TokenClass.token, /((-?[0-9]*\\.[0-9]+|-?[0-9]+\\.[0-9]*)((e|E)(\\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\\+|-)?[0-9]+f?)/),\n    hex_float_literal: new TokenType(\"hex_float_literal\", TokenClass.token, /-?0x((([0-9a-fA-F]*\\.[0-9a-fA-F]+|[0-9a-fA-F]+\\.[0-9a-fA-F]*)((p|P)(\\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\\+|-)?[0-9]+f?))/),\n    int_literal: new TokenType(\"int_literal\", TokenClass.token, /-?0x[0-9a-fA-F]+|0|-?[1-9][0-9]*/),\n    uint_literal: new TokenType(\"uint_literal\", TokenClass.token, /0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),\n    ident: new TokenType(\"ident\", TokenClass.token, /[a-zA-Z][0-9a-zA-Z_]*/),\n    and: new TokenType(\"and\", TokenClass.token, \"&\"),\n    and_and: new TokenType(\"and_and\", TokenClass.token, \"&&\"),\n    arrow: new TokenType(\"arrow \", TokenClass.token, \"->\"),\n    attr: new TokenType(\"attr\", TokenClass.token, \"@\"),\n    attr_left: new TokenType(\"attr_left\", TokenClass.token, \"[[\"),\n    attr_right: new TokenType(\"attr_right\", TokenClass.token, \"]]\"),\n    forward_slash: new TokenType(\"forward_slash\", TokenClass.token, \"/\"),\n    bang: new TokenType(\"bang\", TokenClass.token, \"!\"),\n    bracket_left: new TokenType(\"bracket_left\", TokenClass.token, \"[\"),\n    bracket_right: new TokenType(\"bracket_right\", TokenClass.token, \"]\"),\n    brace_left: new TokenType(\"brace_left\", TokenClass.token, \"{\"),\n    brace_right: new TokenType(\"brace_right\", TokenClass.token, \"}\"),\n    colon: new TokenType(\"colon\", TokenClass.token, \":\"),\n    comma: new TokenType(\"comma\", TokenClass.token, \",\"),\n    equal: new TokenType(\"equal\", TokenClass.token, \"=\"),\n    equal_equal: new TokenType(\"equal_equal\", TokenClass.token, \"==\"),\n    not_equal: new TokenType(\"not_equal\", TokenClass.token, \"!=\"),\n    greater_than: new TokenType(\"greater_than\", TokenClass.token, \">\"),\n    greater_than_equal: new TokenType(\"greater_than_equal\", TokenClass.token, \">=\"),\n    shift_right: new TokenType(\"shift_right\", TokenClass.token, \">>\"),\n    less_than: new TokenType(\"less_than\", TokenClass.token, \"<\"),\n    less_than_equal: new TokenType(\"less_than_equal\", TokenClass.token, \"<=\"),\n    shift_left: new TokenType(\"shift_left\", TokenClass.token, \"<<\"),\n    modulo: new TokenType(\"modulo\", TokenClass.token, \"%\"),\n    minus: new TokenType(\"minus\", TokenClass.token, \"-\"),\n    minus_minus: new TokenType(\"minus_minus\", TokenClass.token, \"--\"),\n    period: new TokenType(\"period\", TokenClass.token, \".\"),\n    plus: new TokenType(\"plus\", TokenClass.token, \"+\"),\n    plus_plus: new TokenType(\"plus_plus\", TokenClass.token, \"++\"),\n    or: new TokenType(\"or\", TokenClass.token, \"|\"),\n    or_or: new TokenType(\"or_or\", TokenClass.token, \"||\"),\n    paren_left: new TokenType(\"paren_left\", TokenClass.token, \"(\"),\n    paren_right: new TokenType(\"paren_right\", TokenClass.token, \")\"),\n    semicolon: new TokenType(\"semicolon\", TokenClass.token, \";\"),\n    star: new TokenType(\"star\", TokenClass.token, \"*\"),\n    tilde: new TokenType(\"tilde\", TokenClass.token, \"~\"),\n    underscore: new TokenType(\"underscore\", TokenClass.token, \"_\"),\n    xor: new TokenType(\"xor\", TokenClass.token, \"^\"),\n    plus_equal: new TokenType(\"plus_equal\", TokenClass.token, \"+=\"),\n    minus_equal: new TokenType(\"minus_equal\", TokenClass.token, \"-=\"),\n    times_equal: new TokenType(\"times_equal\", TokenClass.token, \"*=\"),\n    division_equal: new TokenType(\"division_equal\", TokenClass.token, \"/=\"),\n    modulo_equal: new TokenType(\"modulo_equal\", TokenClass.token, \"%=\"),\n    and_equal: new TokenType(\"and_equal\", TokenClass.token, \"&=\"),\n    or_equal: new TokenType(\"or_equal\", TokenClass.token, \"|=\"),\n    xor_equal: new TokenType(\"xor_equal\", TokenClass.token, \"^=\"),\n    shift_right_equal: new TokenType(\"shift_right_equal\", TokenClass.token, \">>=\"),\n    shift_left_equal: new TokenType(\"shift_left_equal\", TokenClass.token, \"<<=\"),\n};\nTokenTypes.storage_class = [\n    _a.keywords.function,\n    _a.keywords.private,\n    _a.keywords.workgroup,\n    _a.keywords.uniform,\n    _a.keywords.storage,\n];\nTokenTypes.access_mode = [\n    _a.keywords.read,\n    _a.keywords.write,\n    _a.keywords.read_write,\n];\nTokenTypes.sampler_type = [\n    _a.keywords.sampler,\n    _a.keywords.sampler_comparison,\n];\nTokenTypes.sampled_texture_type = [\n    _a.keywords.texture_1d,\n    _a.keywords.texture_2d,\n    _a.keywords.texture_2d_array,\n    _a.keywords.texture_3d,\n    _a.keywords.texture_cube,\n    _a.keywords.texture_cube_array,\n];\nTokenTypes.multisampled_texture_type = [\n    _a.keywords.texture_multisampled_2d,\n];\nTokenTypes.storage_texture_type = [\n    _a.keywords.texture_storage_1d,\n    _a.keywords.texture_storage_2d,\n    _a.keywords.texture_storage_2d_array,\n    _a.keywords.texture_storage_3d,\n];\nTokenTypes.depth_texture_type = [\n    _a.keywords.texture_depth_2d,\n    _a.keywords.texture_depth_2d_array,\n    _a.keywords.texture_depth_cube,\n    _a.keywords.texture_depth_cube_array,\n    _a.keywords.texture_depth_multisampled_2d,\n];\nTokenTypes.any_texture_type = [\n    ..._a.sampled_texture_type,\n    ..._a.multisampled_texture_type,\n    ..._a.storage_texture_type,\n    ..._a.depth_texture_type,\n];\nTokenTypes.texel_format = [\n    _a.keywords.r8unorm,\n    _a.keywords.r8snorm,\n    _a.keywords.r8uint,\n    _a.keywords.r8sint,\n    _a.keywords.r16uint,\n    _a.keywords.r16sint,\n    _a.keywords.r16float,\n    _a.keywords.rg8unorm,\n    _a.keywords.rg8snorm,\n    _a.keywords.rg8uint,\n    _a.keywords.rg8sint,\n    _a.keywords.r32uint,\n    _a.keywords.r32sint,\n    _a.keywords.r32float,\n    _a.keywords.rg16uint,\n    _a.keywords.rg16sint,\n    _a.keywords.rg16float,\n    _a.keywords.rgba8unorm,\n    _a.keywords.rgba8unorm_srgb,\n    _a.keywords.rgba8snorm,\n    _a.keywords.rgba8uint,\n    _a.keywords.rgba8sint,\n    _a.keywords.bgra8unorm,\n    _a.keywords.bgra8unorm_srgb,\n    _a.keywords.rgb10a2unorm,\n    _a.keywords.rg11b10float,\n    _a.keywords.rg32uint,\n    _a.keywords.rg32sint,\n    _a.keywords.rg32float,\n    _a.keywords.rgba16uint,\n    _a.keywords.rgba16sint,\n    _a.keywords.rgba16float,\n    _a.keywords.rgba32uint,\n    _a.keywords.rgba32sint,\n    _a.keywords.rgba32float,\n];\nTokenTypes.const_literal = [\n    _a.tokens.int_literal,\n    _a.tokens.uint_literal,\n    _a.tokens.decimal_float_literal,\n    _a.tokens.hex_float_literal,\n    _a.keywords.true,\n    _a.keywords.false,\n];\nTokenTypes.literal_or_ident = [\n    _a.tokens.ident,\n    _a.tokens.int_literal,\n    _a.tokens.uint_literal,\n    _a.tokens.decimal_float_literal,\n    _a.tokens.hex_float_literal,\n];\nTokenTypes.element_count_expression = [\n    _a.tokens.int_literal,\n    _a.tokens.uint_literal,\n    _a.tokens.ident,\n];\nTokenTypes.template_types = [\n    _a.keywords.vec2,\n    _a.keywords.vec3,\n    _a.keywords.vec4,\n    _a.keywords.mat2x2,\n    _a.keywords.mat2x3,\n    _a.keywords.mat2x4,\n    _a.keywords.mat3x2,\n    _a.keywords.mat3x3,\n    _a.keywords.mat3x4,\n    _a.keywords.mat4x2,\n    _a.keywords.mat4x3,\n    _a.keywords.mat4x4,\n    _a.keywords.atomic,\n    _a.keywords.bitcast,\n    ..._a.any_texture_type,\n];\n// The grammar calls out 'block', but attribute grammar is defined to use a 'ident'.\n// The attribute grammar should be ident | block.\nTokenTypes.attribute_name = [_a.tokens.ident, _a.keywords.block];\nTokenTypes.assignment_operators = [\n    _a.tokens.equal,\n    _a.tokens.plus_equal,\n    _a.tokens.minus_equal,\n    _a.tokens.times_equal,\n    _a.tokens.division_equal,\n    _a.tokens.modulo_equal,\n    _a.tokens.and_equal,\n    _a.tokens.or_equal,\n    _a.tokens.xor_equal,\n    _a.tokens.shift_right_equal,\n    _a.tokens.shift_left_equal,\n];\nTokenTypes.increment_operators = [\n    _a.tokens.plus_plus,\n    _a.tokens.minus_minus,\n];\n/// A token parsed by the WgslScanner.\nclass Token {\n    constructor(type, lexeme, line) {\n        this.type = type;\n        this.lexeme = lexeme;\n        this.line = line;\n    }\n    toString() {\n        return this.lexeme;\n    }\n}\n/// Lexical scanner for the WGSL language. This takes an input source text and generates a list\n/// of Token objects, which can then be fed into the WgslParser to generate an AST.\nclass WgslScanner {\n    constructor(source) {\n        this._tokens = [];\n        this._start = 0;\n        this._current = 0;\n        this._line = 1;\n        this._source = source !== null && source !== void 0 ? source : \"\";\n    }\n    /// Scan all tokens from the source.\n    scanTokens() {\n        while (!this._isAtEnd()) {\n            this._start = this._current;\n            if (!this.scanToken())\n                throw `Invalid syntax at line ${this._line}`;\n        }\n        this._tokens.push(new Token(TokenTypes.eof, \"\", this._line));\n        return this._tokens;\n    }\n    /// Scan a single token from the source.\n    scanToken() {\n        // Find the longest consecutive set of characters that match a rule.\n        let lexeme = this._advance();\n        // Skip line-feed, adding to the line counter.\n        if (lexeme == \"\\n\") {\n            this._line++;\n            return true;\n        }\n        // Skip whitespace\n        if (this._isWhitespace(lexeme)) {\n            return true;\n        }\n        if (lexeme == \"/\") {\n            // If it's a // comment, skip everything until the next line-feed.\n            if (this._peekAhead() == \"/\") {\n                while (lexeme != \"\\n\") {\n                    if (this._isAtEnd())\n                        return true;\n                    lexeme = this._advance();\n                }\n                // skip the linefeed\n                this._line++;\n                return true;\n            }\n            else if (this._peekAhead() == \"*\") {\n                // If it's a / * block comment, skip everything until the matching * /,\n                // allowing for nested block comments.\n                this._advance();\n                let commentLevel = 1;\n                while (commentLevel > 0) {\n                    if (this._isAtEnd())\n                        return true;\n                    lexeme = this._advance();\n                    if (lexeme == \"\\n\") {\n                        this._line++;\n                    }\n                    else if (lexeme == \"*\") {\n                        if (this._peekAhead() == \"/\") {\n                            this._advance();\n                            commentLevel--;\n                            if (commentLevel == 0) {\n                                return true;\n                            }\n                        }\n                    }\n                    else if (lexeme == \"/\") {\n                        if (this._peekAhead() == \"*\") {\n                            this._advance();\n                            commentLevel++;\n                        }\n                    }\n                }\n                return true;\n            }\n        }\n        let matchType = TokenTypes.none;\n        for (;;) {\n            let matchedType = this._findType(lexeme);\n            // The exception to \"longest lexeme\" rule is '>>'. In the case of 1>>2, it's a\n            // shift_right.\n            // In the case of array<vec4<f32>>, it's two greater_than's (one to close the vec4,\n            // and one to close the array).\n            // I don't know of a great way to resolve this, so '>>' is special-cased and if\n            // there was a less_than up to some number of tokens previously, and the token prior to\n            // that is a keyword that requires a '<', then it will be split into two greater_than's;\n            // otherwise it's a shift_right.\n            if (lexeme == \">\" && this._peekAhead() == \">\") {\n                let foundLessThan = false;\n                let ti = this._tokens.length - 1;\n                for (let count = 0; count < 4 && ti >= 0; ++count, --ti) {\n                    if (this._tokens[ti].type === TokenTypes.tokens.less_than) {\n                        if (ti > 0 &&\n                            TokenTypes.template_types.indexOf(this._tokens[ti - 1].type) != -1) {\n                            foundLessThan = true;\n                        }\n                        break;\n                    }\n                }\n                // If there was a less_than in the recent token history, then this is probably a\n                // greater_than.\n                if (foundLessThan) {\n                    this._addToken(matchedType);\n                    return true;\n                }\n            }\n            // The current lexeme may not match any rule, but some token types may be invalid for\n            // part of the string but valid after a few more characters.\n            // For example, 0x.5 is a hex_float_literal. But as it's being scanned,\n            // \"0\" is a int_literal, then \"0x\" is invalid. If we stopped there, it would return\n            // the int_literal \"0\", but that's incorrect. So if we look forward a few characters,\n            // we'd get \"0x.\", which is still invalid, followed by \"0x.5\" which is the correct\n            // hex_float_literal. So that means if we hit an non-matching string, we should look\n            // ahead up to two characters to see if the string starts matching a valid rule again.\n            if (matchedType === TokenTypes.none) {\n                let lookAheadLexeme = lexeme;\n                let lookAhead = 0;\n                const maxLookAhead = 2;\n                for (let li = 0; li < maxLookAhead; ++li) {\n                    lookAheadLexeme += this._peekAhead(li);\n                    matchedType = this._findType(lookAheadLexeme);\n                    if (matchedType !== TokenTypes.none) {\n                        lookAhead = li;\n                        break;\n                    }\n                }\n                if (matchedType === TokenTypes.none) {\n                    if (matchType === TokenTypes.none)\n                        return false;\n                    this._current--;\n                    this._addToken(matchType);\n                    return true;\n                }\n                lexeme = lookAheadLexeme;\n                this._current += lookAhead + 1;\n            }\n            matchType = matchedType;\n            if (this._isAtEnd())\n                break;\n            lexeme += this._advance();\n        }\n        // We got to the end of the input stream. Then the token we've ready so far is it.\n        if (matchType === TokenTypes.none)\n            return false;\n        this._addToken(matchType);\n        return true;\n    }\n    _findType(lexeme) {\n        for (const name in TokenTypes.keywords) {\n            const type = TokenTypes.keywords[name];\n            if (this._match(lexeme, type.rule)) {\n                return type;\n            }\n        }\n        for (const name in TokenTypes.tokens) {\n            const type = TokenTypes.tokens[name];\n            if (this._match(lexeme, type.rule)) {\n                return type;\n            }\n        }\n        return TokenTypes.none;\n    }\n    _match(lexeme, rule) {\n        if (typeof rule === \"string\") {\n            if (rule == lexeme) {\n                return true;\n            }\n        }\n        else {\n            // regex\n            const match = rule.exec(lexeme);\n            if (match && match.index == 0 && match[0] == lexeme)\n                return true;\n        }\n        return false;\n    }\n    _isAtEnd() {\n        return this._current >= this._source.length;\n    }\n    _isWhitespace(c) {\n        return c == \" \" || c == \"\\t\" || c == \"\\r\";\n    }\n    _advance(amount = 0) {\n        let c = this._source[this._current];\n        amount = amount || 0;\n        amount++;\n        this._current += amount;\n        return c;\n    }\n    _peekAhead(offset = 0) {\n        offset = offset || 0;\n        if (this._current + offset >= this._source.length)\n            return \"\\0\";\n        return this._source[this._current + offset];\n    }\n    _addToken(type) {\n        const text = this._source.substring(this._start, this._current);\n        this._tokens.push(new Token(type, text, this._line));\n    }\n}\n\n/**\n * @author Brendan Duncan / https://github.com/brendan-duncan\n */\n/// Parse a sequence of tokens from the WgslScanner into an Abstract Syntax Tree (AST).\nclass WgslParser {\n    constructor() {\n        this._tokens = [];\n        this._current = 0;\n        this._constants = new Map();\n    }\n    parse(tokensOrCode) {\n        this._initialize(tokensOrCode);\n        let statements = [];\n        while (!this._isAtEnd()) {\n            const statement = this._global_decl_or_directive();\n            if (!statement)\n                break;\n            statements.push(statement);\n        }\n        return statements;\n    }\n    _initialize(tokensOrCode) {\n        if (tokensOrCode) {\n            if (typeof tokensOrCode == \"string\") {\n                const scanner = new WgslScanner(tokensOrCode);\n                this._tokens = scanner.scanTokens();\n            }\n            else {\n                this._tokens = tokensOrCode;\n            }\n        }\n        else {\n            this._tokens = [];\n        }\n        this._current = 0;\n    }\n    _error(token, message) {\n        console.error(token, message);\n        return {\n            token,\n            message,\n            toString: function () {\n                return `${message}`;\n            },\n        };\n    }\n    _isAtEnd() {\n        return (this._current >= this._tokens.length ||\n            this._peek().type == TokenTypes.eof);\n    }\n    _match(types) {\n        if (types instanceof TokenType) {\n            if (this._check(types)) {\n                this._advance();\n                return true;\n            }\n            return false;\n        }\n        for (let i = 0, l = types.length; i < l; ++i) {\n            const type = types[i];\n            if (this._check(type)) {\n                this._advance();\n                return true;\n            }\n        }\n        return false;\n    }\n    _consume(types, message) {\n        if (this._check(types))\n            return this._advance();\n        throw this._error(this._peek(), message);\n    }\n    _check(types) {\n        if (this._isAtEnd())\n            return false;\n        const tk = this._peek();\n        if (types instanceof Array) {\n            let t = tk.type;\n            let index = types.indexOf(t);\n            return index != -1;\n        }\n        return tk.type == types;\n    }\n    _advance() {\n        if (!this._isAtEnd())\n            this._current++;\n        return this._previous();\n    }\n    _peek() {\n        return this._tokens[this._current];\n    }\n    _previous() {\n        return this._tokens[this._current - 1];\n    }\n    _global_decl_or_directive() {\n        // semicolon\n        // global_variable_decl semicolon\n        // global_constant_decl semicolon\n        // type_alias semicolon\n        // struct_decl\n        // function_decl\n        // enable_directive\n        // Ignore any stand-alone semicolons\n        while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd())\n            ;\n        if (this._match(TokenTypes.keywords.alias)) {\n            const type = this._type_alias();\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\n            return type;\n        }\n        if (this._match(TokenTypes.keywords.enable)) {\n            const enable = this._enable_directive();\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\n            return enable;\n        }\n        // The following statements have an optional attribute*\n        const attrs = this._attribute();\n        if (this._check(TokenTypes.keywords.var)) {\n            const _var = this._global_variable_decl();\n            if (_var != null)\n                _var.attributes = attrs;\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n            return _var;\n        }\n        if (this._check(TokenTypes.keywords.let)) {\n            const _let = this._global_let_decl();\n            if (_let != null)\n                _let.attributes = attrs;\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n            return _let;\n        }\n        if (this._check(TokenTypes.keywords.const)) {\n            const _const = this._global_const_decl();\n            if (_const != null)\n                _const.attributes = attrs;\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n            return _const;\n        }\n        if (this._check(TokenTypes.keywords.struct)) {\n            const _struct = this._struct_decl();\n            if (_struct != null)\n                _struct.attributes = attrs;\n            return _struct;\n        }\n        if (this._check(TokenTypes.keywords.fn)) {\n            const _fn = this._function_decl();\n            if (_fn != null)\n                _fn.attributes = attrs;\n            return _fn;\n        }\n        return null;\n    }\n    _function_decl() {\n        // attribute* function_header compound_statement\n        // function_header: fn ident paren_left param_list? paren_right (arrow attribute* type_decl)?\n        if (!this._match(TokenTypes.keywords.fn))\n            return null;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected function name.\").toString();\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '(' for function arguments.\");\n        const args = [];\n        if (!this._check(TokenTypes.tokens.paren_right)) {\n            do {\n                if (this._check(TokenTypes.tokens.paren_right))\n                    break;\n                const argAttrs = this._attribute();\n                const name = this._consume(TokenTypes.tokens.ident, \"Expected argument name.\").toString();\n                this._consume(TokenTypes.tokens.colon, \"Expected ':' for argument type.\");\n                const typeAttrs = this._attribute();\n                const type = this._type_decl();\n                if (type != null) {\n                    type.attributes = typeAttrs;\n                    args.push(new Argument(name, type, argAttrs));\n                }\n            } while (this._match(TokenTypes.tokens.comma));\n        }\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')' after function arguments.\");\n        let _return = null;\n        if (this._match(TokenTypes.tokens.arrow)) {\n            const attrs = this._attribute();\n            _return = this._type_decl();\n            if (_return != null)\n                _return.attributes = attrs;\n        }\n        const body = this._compound_statement();\n        return new Function(name, args, _return, body);\n    }\n    _compound_statement() {\n        // brace_left statement* brace_right\n        const statements = [];\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for block.\");\n        while (!this._check(TokenTypes.tokens.brace_right)) {\n            const statement = this._statement();\n            if (statement !== null)\n                statements.push(statement);\n        }\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for block.\");\n        return statements;\n    }\n    _statement() {\n        // semicolon\n        // return_statement semicolon\n        // if_statement\n        // switch_statement\n        // loop_statement\n        // for_statement\n        // func_call_statement semicolon\n        // variable_statement semicolon\n        // break_statement semicolon\n        // continue_statement semicolon\n        // discard semicolon\n        // assignment_statement semicolon\n        // compound_statement\n        // increment_statement semicolon\n        // decrement_statement semicolon\n        // static_assert_statement semicolon\n        // Ignore any stand-alone semicolons\n        while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd())\n            ;\n        if (this._check(TokenTypes.keywords.if))\n            return this._if_statement();\n        if (this._check(TokenTypes.keywords.switch))\n            return this._switch_statement();\n        if (this._check(TokenTypes.keywords.loop))\n            return this._loop_statement();\n        if (this._check(TokenTypes.keywords.for))\n            return this._for_statement();\n        if (this._check(TokenTypes.keywords.while))\n            return this._while_statement();\n        if (this._check(TokenTypes.keywords.static_assert))\n            return this._static_assert_statement();\n        if (this._check(TokenTypes.tokens.brace_left))\n            return this._compound_statement();\n        let result = null;\n        if (this._check(TokenTypes.keywords.return))\n            result = this._return_statement();\n        else if (this._check([\n            TokenTypes.keywords.var,\n            TokenTypes.keywords.let,\n            TokenTypes.keywords.const,\n        ]))\n            result = this._variable_statement();\n        else if (this._match(TokenTypes.keywords.discard))\n            result = new Discard();\n        else if (this._match(TokenTypes.keywords.break))\n            result = new Break();\n        else if (this._match(TokenTypes.keywords.continue))\n            result = new Continue();\n        else\n            result =\n                this._increment_decrement_statement() ||\n                    this._func_call_statement() ||\n                    this._assignment_statement();\n        if (result != null)\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';' after statement.\");\n        return result;\n    }\n    _static_assert_statement() {\n        if (!this._match(TokenTypes.keywords.static_assert))\n            return null;\n        let expression = this._optional_paren_expression();\n        return new StaticAssert(expression);\n    }\n    _while_statement() {\n        if (!this._match(TokenTypes.keywords.while))\n            return null;\n        let condition = this._optional_paren_expression();\n        const block = this._compound_statement();\n        return new While(condition, block);\n    }\n    _for_statement() {\n        // for paren_left for_header paren_right compound_statement\n        if (!this._match(TokenTypes.keywords.for))\n            return null;\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\n        // for_header: (variable_statement assignment_statement func_call_statement)? semicolon short_circuit_or_expression? semicolon (assignment_statement func_call_statement)?\n        const init = !this._check(TokenTypes.tokens.semicolon)\n            ? this._for_init()\n            : null;\n        this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n        const condition = !this._check(TokenTypes.tokens.semicolon)\n            ? this._short_circuit_or_expression()\n            : null;\n        this._consume(TokenTypes.tokens.semicolon, \"Expected ';'.\");\n        const increment = !this._check(TokenTypes.tokens.paren_right)\n            ? this._for_increment()\n            : null;\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\n        const body = this._compound_statement();\n        return new For(init, condition, increment, body);\n    }\n    _for_init() {\n        // (variable_statement assignment_statement func_call_statement)?\n        return (this._variable_statement() ||\n            this._func_call_statement() ||\n            this._assignment_statement());\n    }\n    _for_increment() {\n        // (assignment_statement func_call_statement increment_statement)?\n        return (this._func_call_statement() ||\n            this._increment_decrement_statement() ||\n            this._assignment_statement());\n    }\n    _variable_statement() {\n        // variable_decl\n        // variable_decl equal short_circuit_or_expression\n        // let (ident variable_ident_decl) equal short_circuit_or_expression\n        // const (ident variable_ident_decl) equal short_circuit_or_expression\n        if (this._check(TokenTypes.keywords.var)) {\n            const _var = this._variable_decl();\n            if (_var === null)\n                throw this._error(this._peek(), \"Variable declaration expected.\");\n            let value = null;\n            if (this._match(TokenTypes.tokens.equal))\n                value = this._short_circuit_or_expression();\n            return new Var(_var.name, _var.type, _var.storage, _var.access, value);\n        }\n        if (this._match(TokenTypes.keywords.let)) {\n            const name = this._consume(TokenTypes.tokens.ident, \"Expected name for let.\").toString();\n            let type = null;\n            if (this._match(TokenTypes.tokens.colon)) {\n                const typeAttrs = this._attribute();\n                type = this._type_decl();\n                if (type != null)\n                    type.attributes = typeAttrs;\n            }\n            this._consume(TokenTypes.tokens.equal, \"Expected '=' for let.\");\n            const value = this._short_circuit_or_expression();\n            return new Let(name, type, null, null, value);\n        }\n        if (this._match(TokenTypes.keywords.const)) {\n            const name = this._consume(TokenTypes.tokens.ident, \"Expected name for const.\").toString();\n            let type = null;\n            if (this._match(TokenTypes.tokens.colon)) {\n                const typeAttrs = this._attribute();\n                type = this._type_decl();\n                if (type != null)\n                    type.attributes = typeAttrs;\n            }\n            this._consume(TokenTypes.tokens.equal, \"Expected '=' for const.\");\n            const value = this._short_circuit_or_expression();\n            return new Const(name, type, null, null, value);\n        }\n        return null;\n    }\n    _increment_decrement_statement() {\n        const savedPos = this._current;\n        const _var = this._unary_expression();\n        if (_var == null)\n            return null;\n        if (!this._check(TokenTypes.increment_operators)) {\n            this._current = savedPos;\n            return null;\n        }\n        const token = this._consume(TokenTypes.increment_operators, \"Expected increment operator\");\n        return new Increment(token.type === TokenTypes.tokens.plus_plus\n            ? IncrementOperator.increment\n            : IncrementOperator.decrement, _var);\n    }\n    _assignment_statement() {\n        // (unary_expression underscore) equal short_circuit_or_expression\n        let _var = null;\n        if (this._check(TokenTypes.tokens.brace_right))\n            return null;\n        let isUnderscore = this._match(TokenTypes.tokens.underscore);\n        if (!isUnderscore)\n            _var = this._unary_expression();\n        if (!isUnderscore && _var == null)\n            return null;\n        const type = this._consume(TokenTypes.assignment_operators, \"Expected assignment operator.\");\n        const value = this._short_circuit_or_expression();\n        return new Assign(AssignOperator.parse(type.lexeme), _var, value);\n    }\n    _func_call_statement() {\n        // ident argument_expression_list\n        if (!this._check(TokenTypes.tokens.ident))\n            return null;\n        const savedPos = this._current;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected function name.\");\n        const args = this._argument_expression_list();\n        if (args === null) {\n            this._current = savedPos;\n            return null;\n        }\n        return new Call(name.lexeme, args);\n    }\n    _loop_statement() {\n        // loop brace_left statement* continuing_statement? brace_right\n        if (!this._match(TokenTypes.keywords.loop))\n            return null;\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for loop.\");\n        // statement*\n        const statements = [];\n        let statement = this._statement();\n        while (statement !== null) {\n            if (statement instanceof (Array)) {\n                for (let s of statement) {\n                    statements.push(s);\n                }\n            }\n            else {\n                statements.push(statement);\n            }\n            statement = this._statement();\n        }\n        // continuing_statement: continuing compound_statement\n        let continuing = null;\n        if (this._match(TokenTypes.keywords.continuing))\n            continuing = this._compound_statement();\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for loop.\");\n        return new Loop(statements, continuing);\n    }\n    _switch_statement() {\n        // switch optional_paren_expression brace_left switch_body+ brace_right\n        if (!this._match(TokenTypes.keywords.switch))\n            return null;\n        const condition = this._optional_paren_expression();\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for switch.\");\n        const body = this._switch_body();\n        if (body == null || body.length == 0)\n            throw this._error(this._previous(), \"Expected 'case' or 'default'.\");\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' for switch.\");\n        return new Switch(condition, body);\n    }\n    _switch_body() {\n        // case case_selectors colon brace_left case_body? brace_right\n        // default colon brace_left case_body? brace_right\n        const cases = [];\n        if (this._match(TokenTypes.keywords.case)) {\n            const selector = this._case_selectors();\n            this._consume(TokenTypes.tokens.colon, \"Exected ':' for switch case.\");\n            this._consume(TokenTypes.tokens.brace_left, \"Exected '{' for switch case.\");\n            const body = this._case_body();\n            this._consume(TokenTypes.tokens.brace_right, \"Exected '}' for switch case.\");\n            cases.push(new Case(selector, body));\n        }\n        if (this._match(TokenTypes.keywords.default)) {\n            this._consume(TokenTypes.tokens.colon, \"Exected ':' for switch default.\");\n            this._consume(TokenTypes.tokens.brace_left, \"Exected '{' for switch default.\");\n            const body = this._case_body();\n            this._consume(TokenTypes.tokens.brace_right, \"Exected '}' for switch default.\");\n            cases.push(new Default(body));\n        }\n        if (this._check([TokenTypes.keywords.default, TokenTypes.keywords.case])) {\n            const _cases = this._switch_body();\n            cases.push(_cases[0]);\n        }\n        return cases;\n    }\n    _case_selectors() {\n        // const_literal (comma const_literal)* comma?\n        const selectors = [\n            this._consume(TokenTypes.const_literal, \"Expected constant literal\").toString(),\n        ];\n        while (this._match(TokenTypes.tokens.comma)) {\n            selectors.push(this._consume(TokenTypes.const_literal, \"Expected constant literal\").toString());\n        }\n        return selectors;\n    }\n    _case_body() {\n        // statement case_body?\n        // fallthrough semicolon\n        if (this._match(TokenTypes.keywords.fallthrough)) {\n            this._consume(TokenTypes.tokens.semicolon, \"Expected ';'\");\n            return [];\n        }\n        let statement = this._statement();\n        if (statement == null)\n            return [];\n        if (!(statement instanceof Array)) {\n            statement = [statement];\n        }\n        const nextStatement = this._case_body();\n        if (nextStatement.length == 0)\n            return statement;\n        return [...statement, nextStatement[0]];\n    }\n    _if_statement() {\n        // if optional_paren_expression compound_statement elseif_statement? else_statement?\n        if (!this._match(TokenTypes.keywords.if))\n            return null;\n        const condition = this._optional_paren_expression();\n        const block = this._compound_statement();\n        let elseif = null;\n        if (this._match(TokenTypes.keywords.elseif))\n            elseif = this._elseif_statement();\n        let _else = null;\n        if (this._match(TokenTypes.keywords.else))\n            _else = this._compound_statement();\n        return new If(condition, block, elseif, _else);\n    }\n    _elseif_statement() {\n        // else_if optional_paren_expression compound_statement elseif_statement?\n        const elseif = [];\n        const condition = this._optional_paren_expression();\n        const block = this._compound_statement();\n        elseif.push(new ElseIf(condition, block));\n        if (this._match(TokenTypes.keywords.elseif))\n            elseif.push(this._elseif_statement()[0]);\n        return elseif;\n    }\n    _return_statement() {\n        // return short_circuit_or_expression?\n        if (!this._match(TokenTypes.keywords.return))\n            return null;\n        const value = this._short_circuit_or_expression();\n        return new Return(value);\n    }\n    _short_circuit_or_expression() {\n        // short_circuit_and_expression\n        // short_circuit_or_expression or_or short_circuit_and_expression\n        let expr = this._short_circuit_and_expr();\n        while (this._match(TokenTypes.tokens.or_or)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._short_circuit_and_expr());\n        }\n        return expr;\n    }\n    _short_circuit_and_expr() {\n        // inclusive_or_expression\n        // short_circuit_and_expression and_and inclusive_or_expression\n        let expr = this._inclusive_or_expression();\n        while (this._match(TokenTypes.tokens.and_and)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._inclusive_or_expression());\n        }\n        return expr;\n    }\n    _inclusive_or_expression() {\n        // exclusive_or_expression\n        // inclusive_or_expression or exclusive_or_expression\n        let expr = this._exclusive_or_expression();\n        while (this._match(TokenTypes.tokens.or)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._exclusive_or_expression());\n        }\n        return expr;\n    }\n    _exclusive_or_expression() {\n        // and_expression\n        // exclusive_or_expression xor and_expression\n        let expr = this._and_expression();\n        while (this._match(TokenTypes.tokens.xor)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._and_expression());\n        }\n        return expr;\n    }\n    _and_expression() {\n        // equality_expression\n        // and_expression and equality_expression\n        let expr = this._equality_expression();\n        while (this._match(TokenTypes.tokens.and)) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._equality_expression());\n        }\n        return expr;\n    }\n    _equality_expression() {\n        // relational_expression\n        // relational_expression equal_equal relational_expression\n        // relational_expression not_equal relational_expression\n        const expr = this._relational_expression();\n        if (this._match([TokenTypes.tokens.equal_equal, TokenTypes.tokens.not_equal])) {\n            return new BinaryOperator(this._previous().toString(), expr, this._relational_expression());\n        }\n        return expr;\n    }\n    _relational_expression() {\n        // shift_expression\n        // relational_expression less_than shift_expression\n        // relational_expression greater_than shift_expression\n        // relational_expression less_than_equal shift_expression\n        // relational_expression greater_than_equal shift_expression\n        let expr = this._shift_expression();\n        while (this._match([\n            TokenTypes.tokens.less_than,\n            TokenTypes.tokens.greater_than,\n            TokenTypes.tokens.less_than_equal,\n            TokenTypes.tokens.greater_than_equal,\n        ])) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._shift_expression());\n        }\n        return expr;\n    }\n    _shift_expression() {\n        // additive_expression\n        // shift_expression shift_left additive_expression\n        // shift_expression shift_right additive_expression\n        let expr = this._additive_expression();\n        while (this._match([TokenTypes.tokens.shift_left, TokenTypes.tokens.shift_right])) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._additive_expression());\n        }\n        return expr;\n    }\n    _additive_expression() {\n        // multiplicative_expression\n        // additive_expression plus multiplicative_expression\n        // additive_expression minus multiplicative_expression\n        let expr = this._multiplicative_expression();\n        while (this._match([TokenTypes.tokens.plus, TokenTypes.tokens.minus])) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._multiplicative_expression());\n        }\n        return expr;\n    }\n    _multiplicative_expression() {\n        // unary_expression\n        // multiplicative_expression star unary_expression\n        // multiplicative_expression forward_slash unary_expression\n        // multiplicative_expression modulo unary_expression\n        let expr = this._unary_expression();\n        while (this._match([\n            TokenTypes.tokens.star,\n            TokenTypes.tokens.forward_slash,\n            TokenTypes.tokens.modulo,\n        ])) {\n            expr = new BinaryOperator(this._previous().toString(), expr, this._unary_expression());\n        }\n        return expr;\n    }\n    _unary_expression() {\n        // singular_expression\n        // minus unary_expression\n        // bang unary_expression\n        // tilde unary_expression\n        // star unary_expression\n        // and unary_expression\n        if (this._match([\n            TokenTypes.tokens.minus,\n            TokenTypes.tokens.bang,\n            TokenTypes.tokens.tilde,\n            TokenTypes.tokens.star,\n            TokenTypes.tokens.and,\n        ])) {\n            return new UnaryOperator(this._previous().toString(), this._unary_expression());\n        }\n        return this._singular_expression();\n    }\n    _singular_expression() {\n        // primary_expression postfix_expression ?\n        const expr = this._primary_expression();\n        const p = this._postfix_expression();\n        if (p)\n            expr.postfix = p;\n        return expr;\n    }\n    _postfix_expression() {\n        // bracket_left short_circuit_or_expression bracket_right postfix_expression?\n        if (this._match(TokenTypes.tokens.bracket_left)) {\n            const expr = this._short_circuit_or_expression();\n            this._consume(TokenTypes.tokens.bracket_right, \"Expected ']'.\");\n            const p = this._postfix_expression();\n            if (p)\n                expr.postfix = p;\n            return expr;\n        }\n        // period ident postfix_expression?\n        if (this._match(TokenTypes.tokens.period)) {\n            const name = this._consume(TokenTypes.tokens.ident, \"Expected member name.\");\n            const p = this._postfix_expression();\n            const expr = new StringExpr(name.lexeme);\n            if (p)\n                expr.postfix = p;\n            return expr;\n        }\n        return null;\n    }\n    _primary_expression() {\n        // ident argument_expression_list?\n        if (this._match(TokenTypes.tokens.ident)) {\n            const name = this._previous().toString();\n            if (this._check(TokenTypes.tokens.paren_left)) {\n                const args = this._argument_expression_list();\n                return new CallExpr(name, args);\n            }\n            if (this._constants.has(name)) {\n                const c = this._constants.get(name);\n                const v = c.evaluate();\n                return new ConstExpr(name, v);\n            }\n            return new VariableExpr(name);\n        }\n        // const_literal\n        if (this._match(TokenTypes.const_literal)) {\n            return new LiteralExpr(parseFloat(this._previous().toString()));\n        }\n        // paren_expression\n        if (this._check(TokenTypes.tokens.paren_left)) {\n            return this._paren_expression();\n        }\n        // bitcast less_than type_decl greater_than paren_expression\n        if (this._match(TokenTypes.keywords.bitcast)) {\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<'.\");\n            const type = this._type_decl();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>'.\");\n            const value = this._paren_expression();\n            return new BitcastExpr(type, value);\n        }\n        // type_decl argument_expression_list\n        const type = this._type_decl();\n        const args = this._argument_expression_list();\n        return new TypecastExpr(type, args);\n    }\n    _argument_expression_list() {\n        // paren_left ((short_circuit_or_expression comma)* short_circuit_or_expression comma?)? paren_right\n        if (!this._match(TokenTypes.tokens.paren_left))\n            return null;\n        const args = [];\n        do {\n            if (this._check(TokenTypes.tokens.paren_right))\n                break;\n            const arg = this._short_circuit_or_expression();\n            args.push(arg);\n        } while (this._match(TokenTypes.tokens.comma));\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')' for agument list\");\n        return args;\n    }\n    _optional_paren_expression() {\n        // [paren_left] short_circuit_or_expression [paren_right]\n        this._match(TokenTypes.tokens.paren_left);\n        const expr = this._short_circuit_or_expression();\n        this._match(TokenTypes.tokens.paren_right);\n        return new GroupingExpr([expr]);\n    }\n    _paren_expression() {\n        // paren_left short_circuit_or_expression paren_right\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\n        const expr = this._short_circuit_or_expression();\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\n        return new GroupingExpr([expr]);\n    }\n    _struct_decl() {\n        // attribute* struct ident struct_body_decl\n        if (!this._match(TokenTypes.keywords.struct))\n            return null;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected name for struct.\").toString();\n        // struct_body_decl: brace_left (struct_member comma)* struct_member comma? brace_right\n        this._consume(TokenTypes.tokens.brace_left, \"Expected '{' for struct body.\");\n        const members = [];\n        while (!this._check(TokenTypes.tokens.brace_right)) {\n            // struct_member: attribute* variable_ident_decl\n            const memberAttrs = this._attribute();\n            const memberName = this._consume(TokenTypes.tokens.ident, \"Expected variable name.\").toString();\n            this._consume(TokenTypes.tokens.colon, \"Expected ':' for struct member type.\");\n            const typeAttrs = this._attribute();\n            const memberType = this._type_decl();\n            if (memberType != null)\n                memberType.attributes = typeAttrs;\n            if (!this._check(TokenTypes.tokens.brace_right))\n                this._consume(TokenTypes.tokens.comma, \"Expected ',' for struct member.\");\n            else\n                this._match(TokenTypes.tokens.comma); // trailing comma optional.\n            members.push(new Member(memberName, memberType, memberAttrs));\n        }\n        this._consume(TokenTypes.tokens.brace_right, \"Expected '}' after struct body.\");\n        return new Struct(name, members);\n    }\n    _global_variable_decl() {\n        // attribute* variable_decl (equal const_expression)?\n        const _var = this._variable_decl();\n        if (_var && this._match(TokenTypes.tokens.equal))\n            _var.value = this._const_expression();\n        return _var;\n    }\n    _global_const_decl() {\n        // attribute* const (ident variable_ident_decl) global_const_initializer?\n        if (!this._match(TokenTypes.keywords.const))\n            return null;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\n        let type = null;\n        if (this._match(TokenTypes.tokens.colon)) {\n            const attrs = this._attribute();\n            type = this._type_decl();\n            if (type != null)\n                type.attributes = attrs;\n        }\n        let value = null;\n        if (this._match(TokenTypes.tokens.equal)) {\n            let valueExpr = this._short_circuit_or_expression();\n            let constValue = valueExpr.evaluate();\n            value = new LiteralExpr(constValue);\n        }\n        const c = new Const(name.toString(), type, \"\", \"\", value);\n        this._constants.set(c.name, c);\n        return c;\n    }\n    _global_let_decl() {\n        // attribute* let (ident variable_ident_decl) global_const_initializer?\n        if (!this._match(TokenTypes.keywords.let))\n            return null;\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\n        let type = null;\n        if (this._match(TokenTypes.tokens.colon)) {\n            const attrs = this._attribute();\n            type = this._type_decl();\n            if (type != null)\n                type.attributes = attrs;\n        }\n        let value = null;\n        if (this._match(TokenTypes.tokens.equal)) {\n            value = this._const_expression();\n        }\n        return new Let(name.toString(), type, \"\", \"\", value);\n    }\n    _const_expression() {\n        // type_decl paren_left ((const_expression comma)* const_expression comma?)? paren_right\n        // const_literal\n        if (this._match(TokenTypes.const_literal))\n            return new StringExpr(this._previous().toString());\n        const type = this._type_decl();\n        this._consume(TokenTypes.tokens.paren_left, \"Expected '('.\");\n        let args = [];\n        while (!this._check(TokenTypes.tokens.paren_right)) {\n            args.push(this._const_expression());\n            if (!this._check(TokenTypes.tokens.comma))\n                break;\n            this._advance();\n        }\n        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'.\");\n        return new CreateExpr(type, args);\n    }\n    _variable_decl() {\n        // var variable_qualifier? (ident variable_ident_decl)\n        if (!this._match(TokenTypes.keywords.var))\n            return null;\n        // variable_qualifier: less_than storage_class (comma access_mode)? greater_than\n        let storage = \"\";\n        let access = \"\";\n        if (this._match(TokenTypes.tokens.less_than)) {\n            storage = this._consume(TokenTypes.storage_class, \"Expected storage_class.\").toString();\n            if (this._match(TokenTypes.tokens.comma))\n                access = this._consume(TokenTypes.access_mode, \"Expected access_mode.\").toString();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>'.\");\n        }\n        const name = this._consume(TokenTypes.tokens.ident, \"Expected variable name\");\n        let type = null;\n        if (this._match(TokenTypes.tokens.colon)) {\n            const attrs = this._attribute();\n            type = this._type_decl();\n            if (type != null)\n                type.attributes = attrs;\n        }\n        return new Var(name.toString(), type, storage, access, null);\n    }\n    _enable_directive() {\n        // enable ident semicolon\n        const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\n        return new Enable(name.toString());\n    }\n    _type_alias() {\n        // type ident equal type_decl\n        const name = this._consume(TokenTypes.tokens.ident, \"identity expected.\");\n        this._consume(TokenTypes.tokens.equal, \"Expected '=' for type alias.\");\n        const alias = this._type_decl();\n        if (alias === null) {\n            throw this._error(this._peek(), \"Expected Type for Alias.\");\n        }\n        return new Alias(name.toString(), alias);\n    }\n    _type_decl() {\n        // ident\n        // bool\n        // float32\n        // int32\n        // uint32\n        // vec2 less_than type_decl greater_than\n        // vec3 less_than type_decl greater_than\n        // vec4 less_than type_decl greater_than\n        // mat2x2 less_than type_decl greater_than\n        // mat2x3 less_than type_decl greater_than\n        // mat2x4 less_than type_decl greater_than\n        // mat3x2 less_than type_decl greater_than\n        // mat3x3 less_than type_decl greater_than\n        // mat3x4 less_than type_decl greater_than\n        // mat4x2 less_than type_decl greater_than\n        // mat4x3 less_than type_decl greater_than\n        // mat4x4 less_than type_decl greater_than\n        // atomic less_than type_decl greater_than\n        // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\n        // array_type_decl\n        // texture_sampler_types\n        if (this._check([\n            TokenTypes.tokens.ident,\n            ...TokenTypes.texel_format,\n            TokenTypes.keywords.bool,\n            TokenTypes.keywords.f32,\n            TokenTypes.keywords.i32,\n            TokenTypes.keywords.u32,\n        ])) {\n            const type = this._advance();\n            return new Type(type.toString());\n        }\n        if (this._check(TokenTypes.template_types)) {\n            let type = this._advance().toString();\n            let format = null;\n            let access = null;\n            if (this._match(TokenTypes.tokens.less_than)) {\n                format = this._type_decl();\n                access = null;\n                if (this._match(TokenTypes.tokens.comma))\n                    access = this._consume(TokenTypes.access_mode, \"Expected access_mode for pointer\").toString();\n                this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for type.\");\n            }\n            return new TemplateType(type, format, access);\n        }\n        // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than\n        if (this._match(TokenTypes.keywords.ptr)) {\n            let pointer = this._previous().toString();\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<' for pointer.\");\n            const storage = this._consume(TokenTypes.storage_class, \"Expected storage_class for pointer\");\n            this._consume(TokenTypes.tokens.comma, \"Expected ',' for pointer.\");\n            const decl = this._type_decl();\n            let access = null;\n            if (this._match(TokenTypes.tokens.comma))\n                access = this._consume(TokenTypes.access_mode, \"Expected access_mode for pointer\").toString();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for pointer.\");\n            return new PointerType(pointer, storage.toString(), decl, access);\n        }\n        // texture_sampler_types\n        let type = this._texture_sampler_types();\n        if (type)\n            return type;\n        // The following type_decl's have an optional attribyte_list*\n        const attrs = this._attribute();\n        // attribute* array less_than type_decl (comma element_count_expression)? greater_than\n        if (this._match(TokenTypes.keywords.array)) {\n            const array = this._previous();\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<' for array type.\");\n            const format = this._type_decl();\n            let count = \"\";\n            if (this._match(TokenTypes.tokens.comma)) {\n                let c = this._shift_expression();\n                count = c.evaluate().toString();\n            }\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for array.\");\n            let countInt = count ? parseInt(count) : 0;\n            return new ArrayType(array.toString(), attrs, format, countInt);\n        }\n        return null;\n    }\n    _texture_sampler_types() {\n        // sampler_type\n        if (this._match(TokenTypes.sampler_type))\n            return new SamplerType(this._previous().toString(), null, null);\n        // depth_texture_type\n        if (this._match(TokenTypes.depth_texture_type))\n            return new SamplerType(this._previous().toString(), null, null);\n        // sampled_texture_type less_than type_decl greater_than\n        // multisampled_texture_type less_than type_decl greater_than\n        if (this._match(TokenTypes.sampled_texture_type) ||\n            this._match(TokenTypes.multisampled_texture_type)) {\n            const sampler = this._previous();\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<' for sampler type.\");\n            const format = this._type_decl();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for sampler type.\");\n            return new SamplerType(sampler.toString(), format, null);\n        }\n        // storage_texture_type less_than texel_format comma access_mode greater_than\n        if (this._match(TokenTypes.storage_texture_type)) {\n            const sampler = this._previous();\n            this._consume(TokenTypes.tokens.less_than, \"Expected '<' for sampler type.\");\n            const format = this._consume(TokenTypes.texel_format, \"Invalid texel format.\").toString();\n            this._consume(TokenTypes.tokens.comma, \"Expected ',' after texel format.\");\n            const access = this._consume(TokenTypes.access_mode, \"Expected access mode for storage texture type.\").toString();\n            this._consume(TokenTypes.tokens.greater_than, \"Expected '>' for sampler type.\");\n            return new SamplerType(sampler.toString(), format, access);\n        }\n        return null;\n    }\n    _attribute() {\n        // attr ident paren_left (literal_or_ident comma)* literal_or_ident paren_right\n        // attr ident\n        let attributes = [];\n        while (this._match(TokenTypes.tokens.attr)) {\n            const name = this._consume(TokenTypes.attribute_name, \"Expected attribute name\");\n            const attr = new Attribute(name.toString(), null);\n            if (this._match(TokenTypes.tokens.paren_left)) {\n                // literal_or_ident\n                attr.value = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\n                if (this._check(TokenTypes.tokens.comma)) {\n                    this._advance();\n                    do {\n                        const v = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\n                        if (!(attr.value instanceof Array)) {\n                            attr.value = [attr.value];\n                        }\n                        attr.value.push(v);\n                    } while (this._match(TokenTypes.tokens.comma));\n                }\n                this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\n            }\n            attributes.push(attr);\n        }\n        // Deprecated:\n        // attr_left (attribute comma)* attribute attr_right\n        while (this._match(TokenTypes.tokens.attr_left)) {\n            if (!this._check(TokenTypes.tokens.attr_right)) {\n                do {\n                    const name = this._consume(TokenTypes.attribute_name, \"Expected attribute name\");\n                    const attr = new Attribute(name.toString(), null);\n                    if (this._match(TokenTypes.tokens.paren_left)) {\n                        // literal_or_ident\n                        attr.value = [\n                            this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString(),\n                        ];\n                        if (this._check(TokenTypes.tokens.comma)) {\n                            this._advance();\n                            do {\n                                const v = this._consume(TokenTypes.literal_or_ident, \"Expected attribute value\").toString();\n                                attr.value.push(v);\n                            } while (this._match(TokenTypes.tokens.comma));\n                        }\n                        this._consume(TokenTypes.tokens.paren_right, \"Expected ')'\");\n                    }\n                    attributes.push(attr);\n                } while (this._match(TokenTypes.tokens.comma));\n            }\n            // Consume ]]\n            this._consume(TokenTypes.tokens.attr_right, \"Expected ']]' after attribute declarations\");\n        }\n        if (attributes.length == 0)\n            return null;\n        return attributes;\n    }\n}\n\n/**\n * @author Brendan Duncan / https://github.com/brendan-duncan\n */\nclass VariableInfo {\n    constructor(node, group, binding) {\n        this.group = group;\n        this.binding = binding;\n        this.node = node;\n    }\n    get name() {\n        return this.node.name;\n    }\n    get type() {\n        return this.node.type;\n    }\n    get attributes() {\n        return this.node.attributes;\n    }\n}\nclass FunctionInfo {\n    constructor(node) {\n        this.inputs = [];\n        this.node = node;\n    }\n    get name() {\n        return this.node.name;\n    }\n    get returnType() {\n        return this.node.returnType;\n    }\n    get args() {\n        return this.node.args;\n    }\n    get attributes() {\n        return this.node.attributes;\n    }\n}\nclass InputInfo {\n    constructor(name, type, input, locationType, location) {\n        this.name = name;\n        this.type = type;\n        this.input = input;\n        this.locationType = locationType;\n        this.location = location;\n        this.interpolation = this.interpolation;\n    }\n}\nclass MemberInfo {\n}\nclass StructInfo {\n}\nclass TypeInfo {\n    constructor(align, size) {\n        this.align = align;\n        this.size = size;\n    }\n}\nclass BufferInfo extends TypeInfo {\n    constructor(name, type) {\n        super(0, 0);\n        this.name = name;\n        this.type = type;\n    }\n}\nclass BindGropEntry {\n    constructor(type, resource) {\n        this.type = type;\n        this.resource = resource;\n    }\n}\nclass EntryFunctions {\n    constructor() {\n        this.vertex = [];\n        this.fragment = [];\n        this.compute = [];\n    }\n}\nclass WgslReflect {\n    constructor(code) {\n        /// All top-level structs in the shader.\n        this.structs = [];\n        /// All top-level uniform vars in the shader.\n        this.uniforms = [];\n        /// All top-level storage vars in the shader.\n        this.storage = [];\n        /// All top-level texture vars in the shader;\n        this.textures = [];\n        // All top-level sampler vars in the shader.\n        this.samplers = [];\n        /// All top-level functions in the shader.\n        this.functions = [];\n        /// All top-level type aliases in the shader.\n        this.aliases = [];\n        if (code)\n            this.initialize(code);\n    }\n    initialize(code) {\n        const parser = new WgslParser();\n        this.ast = parser.parse(code);\n        this.entry = new EntryFunctions();\n        for (const node of this.ast) {\n            if (node.astNodeType == \"struct\")\n                this.structs.push(node);\n            if (node.astNodeType == \"alias\")\n                this.aliases.push(node);\n            if (this.isUniformVar(node)) {\n                const v = node;\n                const g = this.getAttributeNum(node, \"group\", 0);\n                const b = this.getAttributeNum(node, \"binding\", 0);\n                this.uniforms.push(new VariableInfo(v, g, b));\n            }\n            if (this.isStorageVar(node)) {\n                const v = node;\n                const g = this.getAttributeNum(node, \"group\", 0);\n                const b = this.getAttributeNum(node, \"binding\", 0);\n                this.storage.push(new VariableInfo(v, g, b));\n            }\n            if (this.isTextureVar(node)) {\n                const v = node;\n                const g = this.getAttributeNum(node, \"group\", 0);\n                const b = this.getAttributeNum(node, \"binding\", 0);\n                this.textures.push(new VariableInfo(v, g, b));\n            }\n            if (this.isSamplerVar(node)) {\n                const v = node;\n                const g = this.getAttributeNum(node, \"group\", 0);\n                const b = this.getAttributeNum(node, \"binding\", 0);\n                this.samplers.push(new VariableInfo(v, g, b));\n            }\n            if (node instanceof Function) {\n                const fn = new FunctionInfo(node);\n                fn.inputs = this._getInputs(node.args);\n                this.functions.push(fn);\n                const vertexStage = this.getAttribute(node, \"vertex\");\n                const fragmentStage = this.getAttribute(node, \"fragment\");\n                const computeStage = this.getAttribute(node, \"compute\");\n                const stage = vertexStage || fragmentStage || computeStage;\n                if (stage) {\n                    this.entry[stage.name].push(fn);\n                }\n            }\n        }\n    }\n    isTextureVar(node) {\n        return (node instanceof Var &&\n            node.type !== null &&\n            WgslReflect.textureTypes.indexOf(node.type.name) != -1);\n    }\n    isSamplerVar(node) {\n        return (node instanceof Var &&\n            node.type !== null &&\n            WgslReflect.samplerTypes.indexOf(node.type.name) != -1);\n    }\n    isUniformVar(node) {\n        return node instanceof Var && node.storage == \"uniform\";\n    }\n    isStorageVar(node) {\n        return node instanceof Var && node.storage == \"storage\";\n    }\n    getAttributeNum(node, name, defaultValue) {\n        const a = this.getAttribute(node, name);\n        if (a == null) {\n            return defaultValue;\n        }\n        let v = a !== null && a.value !== null ? a.value : defaultValue;\n        if (v instanceof Array) {\n            v = v[0];\n        }\n        if (typeof v === \"number\") {\n            return v;\n        }\n        if (typeof v === \"string\") {\n            return parseInt(v);\n        }\n        return defaultValue;\n    }\n    getAttribute(node, name) {\n        const obj = node;\n        if (!obj || !obj[\"attributes\"])\n            return null;\n        const attrs = obj[\"attributes\"];\n        for (let a of attrs) {\n            if (a.name == name)\n                return a;\n        }\n        return null;\n    }\n    _getInputs(args, inputs = undefined) {\n        if (inputs === undefined)\n            inputs = [];\n        for (const arg of args) {\n            const input = this._getInputInfo(arg);\n            if (input !== null)\n                inputs.push(input);\n            const struct = this.getStruct(arg.type);\n            if (struct)\n                this._getInputs(struct.members, inputs);\n        }\n        return inputs;\n    }\n    _getInputInfo(node) {\n        const location = this.getAttribute(node, \"location\") || this.getAttribute(node, \"builtin\");\n        if (location !== null) {\n            const interpolation = this.getAttribute(node, \"interpolation\");\n            const info = new InputInfo(node.name, node.type, node, location.name, this._parseInt(location.value));\n            if (interpolation !== null) {\n                info.interpolation = this._parseString(interpolation.value);\n            }\n            return info;\n        }\n        return null;\n    }\n    _parseString(s) {\n        if (s instanceof Array) {\n            s = s[0];\n        }\n        return s;\n    }\n    _parseInt(s) {\n        if (s instanceof Array) {\n            s = s[0];\n        }\n        const n = parseInt(s);\n        return isNaN(n) ? s : n;\n    }\n    getStruct(name) {\n        if (name === null)\n            return null;\n        if (name instanceof Struct)\n            return name;\n        if (name instanceof Type) {\n            name = name.name;\n        }\n        for (const u of this.structs) {\n            if (u.name == name)\n                return u;\n        }\n        return null;\n    }\n    getAlias(type) {\n        if (type === null)\n            return null;\n        if (type instanceof Node) {\n            if (!(type instanceof Type)) {\n                return null;\n            }\n            type = type.name;\n        }\n        for (const u of this.aliases) {\n            if (u.name == type)\n                return u.type;\n        }\n        return null;\n    }\n    getBindGroups() {\n        const groups = [];\n        function _makeRoom(group, binding) {\n            if (group >= groups.length)\n                groups.length = group + 1;\n            if (groups[group] === undefined)\n                groups[group] = [];\n            if (binding >= groups[group].length)\n                groups[group].length = binding + 1;\n        }\n        for (const u of this.uniforms) {\n            _makeRoom(u.group, u.binding);\n            const group = groups[u.group];\n            group[u.binding] = new BindGropEntry(\"buffer\", this.getUniformBufferInfo(u));\n        }\n        for (const u of this.storage) {\n            _makeRoom(u.group, u.binding);\n            const group = groups[u.group];\n            group[u.binding] = new BindGropEntry(\"storage\", this.getStorageBufferInfo(u));\n        }\n        for (const t of this.textures) {\n            _makeRoom(t.group, t.binding);\n            const group = groups[t.group];\n            group[t.binding] = new BindGropEntry(\"texture\", t);\n        }\n        for (const t of this.samplers) {\n            _makeRoom(t.group, t.binding);\n            const group = groups[t.group];\n            group[t.binding] = new BindGropEntry(\"sampler\", t);\n        }\n        return groups;\n    }\n    getStorageBufferInfo(node) {\n        if (node instanceof VariableInfo) {\n            node = node.node;\n        }\n        if (!this.isStorageVar(node))\n            return null;\n        const group = this.getAttributeNum(node, \"group\", 0);\n        const binding = this.getAttributeNum(node, \"binding\", 0);\n        const info = this._getUniformInfo(node);\n        info.group = group;\n        info.binding = binding;\n        return info;\n    }\n    /// Returns information about a struct type, null if the type is not a struct.\n    getStructInfo(node) {\n        var _a, _b, _c, _d, _e;\n        if (node === null)\n            return null;\n        const struct = node instanceof Struct ? node : this.getStruct(node.type);\n        if (!struct)\n            return null;\n        let offset = 0;\n        let lastSize = 0;\n        let lastOffset = 0;\n        let structAlign = 0;\n        let buffer = new BufferInfo(node.name, node instanceof Var ? node.type : null);\n        buffer.members = [];\n        for (let mi = 0, ml = struct.members.length; mi < ml; ++mi) {\n            const member = struct.members[mi];\n            const name = member.name;\n            const info = this.getTypeInfo(member);\n            if (!info)\n                continue;\n            const type = member.type;\n            const align = info.align;\n            const size = info.size;\n            offset = this._roundUp(align, offset + lastSize);\n            lastSize = size;\n            lastOffset = offset;\n            structAlign = Math.max(structAlign, align);\n            const isArray = member.type.astNodeType === \"array\";\n            const s = this.getStruct(type) ||\n                (isArray ? this.getStruct((_a = type[\"format\"]) === null || _a === void 0 ? void 0 : _a.name) : null);\n            const isStruct = !!s;\n            const si = isStruct ? this.getStructInfo(s) : undefined;\n            const arrayStride = ((_b = si === null || si === void 0 ? void 0 : si.size) !== null && _b !== void 0 ? _b : isArray)\n                ? (_c = this.getTypeInfo(type[\"format\"])) === null || _c === void 0 ? void 0 : _c.size\n                : (_d = this.getTypeInfo(member.type)) === null || _d === void 0 ? void 0 : _d.size;\n            const arrayCount = (_e = member.type[\"count\"]) !== null && _e !== void 0 ? _e : 0;\n            const members = isStruct ? si === null || si === void 0 ? void 0 : si.members : undefined;\n            const u = new MemberInfo();\n            u.node = member;\n            u.name = name;\n            u.offset = offset;\n            u.size = size;\n            u.type = type;\n            u.isArray = isArray;\n            u.arrayCount = arrayCount;\n            u.arrayStride = arrayStride;\n            u.isStruct = isStruct;\n            u.members = members;\n            buffer.members.push(u);\n        }\n        buffer.size = this._roundUp(structAlign, lastOffset + lastSize);\n        buffer.align = structAlign;\n        buffer.isArray = false;\n        buffer.isStruct = true;\n        buffer.arrayCount = 0;\n        return buffer;\n    }\n    _getUniformInfo(node) {\n        var _a, _b, _c, _d, _e;\n        const structInfo = this.getStructInfo(node);\n        if (structInfo !== null)\n            return structInfo;\n        var n = node;\n        const typeInfo = this.getTypeInfo(n.type);\n        if (typeInfo === null)\n            return null;\n        const info = new BufferInfo(node.name, n.type);\n        info.align = typeInfo.align;\n        info.size = typeInfo.size;\n        let s = this.getStruct((_a = n.type[\"format\"]) === null || _a === void 0 ? void 0 : _a.name);\n        let si = s ? this.getStructInfo(s) : undefined;\n        info.isArray = n.type.astNodeType === \"array\";\n        info.isStruct = !!s;\n        info.members = info.isStruct ? si === null || si === void 0 ? void 0 : si.members : undefined;\n        info.name = n.name;\n        info.type = n.type;\n        info.arrayStride =\n            ((_b = si === null || si === void 0 ? void 0 : si.size) !== null && _b !== void 0 ? _b : info.isArray)\n                ? (_c = this.getTypeInfo(n.type[\"format\"])) === null || _c === void 0 ? void 0 : _c.size\n                : (_d = this.getTypeInfo(n.type)) === null || _d === void 0 ? void 0 : _d.size;\n        info.arrayCount = parseInt((_e = n.type[\"count\"]) !== null && _e !== void 0 ? _e : 0);\n        return info;\n    }\n    getUniformBufferInfo(uniform) {\n        if (!this.isUniformVar(uniform.node))\n            return null;\n        const info = this._getUniformInfo(uniform.node);\n        info.group = uniform.group;\n        info.binding = uniform.binding;\n        return info;\n    }\n    getTypeInfo(type) {\n        var _a;\n        if (type === null || type === undefined)\n            return null;\n        const explicitSize = this.getAttributeNum(type, \"size\", 0);\n        const explicitAlign = this.getAttributeNum(type, \"align\", 0);\n        if (type instanceof Member)\n            type = type.type;\n        if (type instanceof Type) {\n            const alias = this.getAlias(type.name);\n            if (alias !== null) {\n                type = alias;\n            }\n            else {\n                const struct = this.getStruct(type.name);\n                if (struct !== null)\n                    type = struct;\n            }\n        }\n        {\n            const info = WgslReflect.typeInfo[type.name];\n            if (info !== undefined) {\n                const divisor = type[\"format\"] === \"f16\" ? 2 : 1;\n                return new TypeInfo(Math.max(explicitAlign, info.align / divisor), Math.max(explicitSize, info.size / divisor));\n            }\n        }\n        {\n            const info = WgslReflect.typeInfo[type.name.substring(0, type.name.length - 1)];\n            if (info) {\n                const divisor = type.name[type.name.length - 1] === \"h\" ? 2 : 1;\n                return new TypeInfo(Math.max(explicitAlign, info.align / divisor), Math.max(explicitSize, info.size / divisor));\n            }\n        }\n        if (type.name == \"array\") {\n            let align = 8;\n            let size = 8;\n            // Type                 AlignOf(T)          Sizeof(T)\n            // array<E, N>          AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))\n            // array<E>             AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))  (N determined at runtime)\n            //\n            // @stride(Q)\n            // array<E, N>          AlignOf(E)          N * Q\n            //\n            // @stride(Q)\n            // array<E>             AlignOf(E)          Nruntime * Q\n            //const E = type.format.name;\n            const E = this.getTypeInfo(type[\"format\"]);\n            if (E !== null) {\n                size = E.size;\n                align = E.align;\n            }\n            const N = parseInt((_a = type[\"count\"]) !== null && _a !== void 0 ? _a : 1);\n            const stride = this.getAttributeNum(type, \"stride\", this._roundUp(align, size));\n            size = N * stride;\n            if (explicitSize)\n                size = explicitSize;\n            return new TypeInfo(Math.max(explicitAlign, align), Math.max(explicitSize, size));\n        }\n        if (type instanceof Struct) {\n            let align = 0;\n            let size = 0;\n            // struct S     AlignOf:    max(AlignOfMember(S, M1), ... , AlignOfMember(S, MN))\n            //              SizeOf:     roundUp(AlignOf(S), OffsetOfMember(S, L) + SizeOfMember(S, L))\n            //                          Where L is the last member of the structure\n            let offset = 0;\n            let lastSize = 0;\n            let lastOffset = 0;\n            for (const m of type.members) {\n                const mi = this.getTypeInfo(m);\n                align = Math.max(mi.align, align);\n                offset = this._roundUp(mi.align, offset + lastSize);\n                lastSize = mi.size;\n                lastOffset = offset;\n            }\n            size = this._roundUp(align, lastOffset + lastSize);\n            return new TypeInfo(Math.max(explicitAlign, align), Math.max(explicitSize, size));\n        }\n        return null;\n    }\n    _roundUp(k, n) {\n        return Math.ceil(n / k) * k;\n    }\n}\n// Type                 AlignOf(T)          Sizeof(T)\n// i32, u32, or f32     4                   4\n// atomic<T>            4                   4\n// vec2<T>              8                   8\n// vec3<T>              16                  12\n// vec4<T>              16                  16\n// mat2x2<f32>          8                   16\n// mat3x2<f32>          8                   24\n// mat4x2<f32>          8                   32\n// mat2x3<f32>          16                  32\n// mat3x3<f32>          16                  48\n// mat4x3<f32>          16                  64\n// mat2x4<f32>          16                  32\n// mat3x4<f32>          16                  48\n// mat4x4<f32>          16                  64\nWgslReflect.typeInfo = {\n    f16: { align: 2, size: 2 },\n    i32: { align: 4, size: 4 },\n    u32: { align: 4, size: 4 },\n    f32: { align: 4, size: 4 },\n    atomic: { align: 4, size: 4 },\n    vec2: { align: 8, size: 8 },\n    vec3: { align: 16, size: 12 },\n    vec4: { align: 16, size: 16 },\n    mat2x2: { align: 8, size: 16 },\n    mat3x2: { align: 8, size: 24 },\n    mat4x2: { align: 8, size: 32 },\n    mat2x3: { align: 16, size: 32 },\n    mat3x3: { align: 16, size: 48 },\n    mat4x3: { align: 16, size: 64 },\n    mat2x4: { align: 16, size: 32 },\n    mat3x4: { align: 16, size: 48 },\n    mat4x4: { align: 16, size: 64 },\n};\nWgslReflect.textureTypes = TokenTypes.any_texture_type.map((t) => {\n    return t.name;\n});\nWgslReflect.samplerTypes = TokenTypes.sampler_type.map((t) => {\n    return t.name;\n});\n\nexport { Alias, Argument, ArrayType, Assign, AssignOperator, Attribute, BinaryOperator, BindGropEntry, BitcastExpr, Break, BufferInfo, Call, CallExpr, Case, Const, ConstExpr, Continue, CreateExpr, Default, Discard, ElseIf, Enable, EntryFunctions, Expression, For, Function, FunctionInfo, GroupingExpr, If, Increment, IncrementOperator, InputInfo, Let, LiteralExpr, Loop, Member, MemberInfo, Node, Operator, PointerType, Return, SamplerType, Statement, StaticAssert, StringExpr, Struct, StructInfo, Switch, SwitchCase, TemplateType, Token, TokenClass, TokenType, TokenTypes, Type, TypeInfo, TypecastExpr, UnaryOperator, Var, VariableExpr, VariableInfo, WgslParser, WgslReflect, WgslScanner, While };\n","import { WgslReflect, Member } from './3rdParty/wgsl_reflect/wgsl_reflect.module';\n\nexport interface StructDefinition {\n    fields: FieldDefinitions;\n    size: number;\n}\n\nexport interface StorageDefinition extends StructDefinition {\n    binding: number;\n    group: number;\n}\n\nexport type IntrinsicDefinition = {\n    offset: number;\n    size: number;\n    type: string;\n    numElements?: number;\n};\n\nexport type FieldDefinition = IntrinsicDefinition | StructDefinition | IntrinsicDefinition[] | StructDefinition[];\n\nexport type FieldDefinitions = {\n    [x: string]: FieldDefinition;\n};\n\nexport type StructDefinitions = {\n    [x: string]: StructDefinition;\n}\n\nexport type StorageDefinitions = {\n    [x: string]: StorageDefinition;\n}\n\ntype ShaderDataDefinitions = {\n    uniforms: StorageDefinitions,\n    storages: StorageDefinitions,\n    structs: StructDefinitions,\n};\n\n/**\n * Given a WGSL shader, returns data definitions for structures,\n * uniforms, and storage buffers\n *\n * Example:\n *\n * ```js\n * const code = `\n * struct MyStruct {\n *    color: vec4<f32>,\n *    brightness: f32,\n *    kernel: array<f32, 9>,\n * };\n * @group(0) @binding(0) var<uniform> myUniforms: MyUniforms;\n * `;\n * const defs = makeShaderDataDefinitions(code);\n * const myUniformValues = makeStructuredView(defs.uniforms.myUniforms);\n *\n * myUniformValues.set({\n *   color: [1, 0, 1, 1],\n *   brightness: 0.8,\n *   kernel: [\n *      1, 0, -1,\n *      2, 0, -2,\n *      1, 0, -1,\n *   ],\n * });\n * device.queue.writeBuffer(uniformBuffer, 0, myUniformValues.arrayBuffer);\n * ```\n *\n * @param code WGSL shader. Note: it is not required for this to be a complete shader\n * @returns definitions of the structures by name. Useful for passing to {@link makeStructuredView}\n */\nexport function makeShaderDataDefinitions(code: string): ShaderDataDefinitions {\n    const reflect = new WgslReflect(code);\n\n    const structs = Object.fromEntries(reflect.structs.map(struct => {\n        const info = reflect.getStructInfo(struct);\n        return [struct.name, addMembers(reflect, info.members, info.size)];\n    }));\n\n    const uniforms = Object.fromEntries(reflect.uniforms.map(uniform => {\n        const info = reflect.getUniformBufferInfo(uniform);\n        const member = addMember(reflect, info, 0)[1] as StorageDefinition;\n        member.binding = info.binding;\n        member.group = info.group;\n        return [uniform.name, member];\n    }));\n\n    const storages = Object.fromEntries(reflect.storage.map(uniform => {\n        const info = reflect.getStorageBufferInfo(uniform);\n        const member = addMember(reflect, info, 0)[1] as StorageDefinition;\n        member.binding = info.binding;\n        member.group = info.group;\n        return [uniform.name, member];\n    }));\n\n    return {\n        structs,\n        storages,\n        uniforms,\n    };\n}\n\nfunction addMember(reflect: WgslReflect, m: Member, offset: number): [string, StructDefinition | IntrinsicDefinition | IntrinsicDefinition[] | StructDefinition[]] {\n    if (m.isArray) {\n        if (m.isStruct) {\n            return [\n                m.name,\n                new Array(m.arrayCount).fill(0).map((_, ndx) => {\n                    return addMembers(reflect, m.members!, m.size / m.arrayCount, offset + (m.offset || 0) + m.size / m.arrayCount * ndx);\n                }),\n            ];\n        } else {\n            return [\n                m.name,\n                {\n                    offset: offset + (m.offset || 0),\n                    size: m.size,\n                    type: m.type.format!.format\n                        ? `${m.type.format!.name!}<${m.type.format!.format!.name}>`\n                        : m.type.format!.name!,\n                    numElements: m.arrayCount,\n                },\n            ];\n        }\n    } else if (m.isStruct) {\n        return [\n            m.name,\n            addMembers(reflect, m.members!, m.size, offset + (m.offset || 0)),\n        ];\n    } else {\n        return [\n            m.name,\n            {\n                offset: offset + (m.offset || 0),\n                size: m.size,\n                type: m.type?.format\n                    ? `${m.type.name}<${m.type.format.name}>`\n                    : m.type?.name || m.name,\n            },\n        ];\n    }\n}\n\nfunction addMembers(reflect: WgslReflect, members: Member[], size: number, offset = 0): StructDefinition {\n    const fields: FieldDefinitions = Object.fromEntries(members.map(m => {\n        return addMember(reflect, m, offset);\n    }));\n\n    return {\n        fields,\n        size,\n    };\n}\n","import {\n   isTypedArray\n} from './utils.js';\n\nfunction normalizeGPUExtent3Dict(size: GPUExtent3DDict) {\n   return [size.width, size.height || 1, size.depthOrArrayLayers || 1];\n}\n\nexport function normalizeGPUExtent3D(size: GPUExtent3D): number[] {\n   return (Array.isArray(size) || isTypedArray(size))\n      ? Array.from(size as Iterable<number>)\n      : normalizeGPUExtent3Dict(size as GPUExtent3DDict);\n}\n\nexport function numMipLevels(size: GPUExtent3D) {\n    const sizes = normalizeGPUExtent3D(size);\n    const maxSize = Math.max(...sizes);\n    return 1 + Math.log2(maxSize) | 0;\n}\n\n// Use a WeakMap so the device can be destroyed and/or lost\nconst byDevice = new WeakMap();\n\nexport function generateMipmap(device: GPUDevice, texture: GPUTexture) {\n   let perDeviceInfo = byDevice.get(device);\n   if (!perDeviceInfo) {\n      perDeviceInfo = {\n         pipelineByFormat: {},\n      };\n      byDevice.set(device, perDeviceInfo);\n   }\n   let {\n      sampler,\n      module,\n   } = perDeviceInfo;\n   const {\n      pipelineByFormat,\n   } = perDeviceInfo;\n\n   if (!module) {\n      module = device.createShaderModule({\n         label: 'mip level generation',\n         code: `\n            struct VSOutput {\n               @builtin(position) position: vec4f,\n               @location(0) texcoord: vec2f,\n            };\n\n            @vertex fn vs(\n               @builtin(vertex_index) vertexIndex : u32\n            ) -> VSOutput {\n               var pos = array<vec2f, 3>(\n                  vec2f(-1.0, -1.0),\n                  vec2f(-1.0,  3.0),\n                  vec2f( 3.0, -1.0),\n               );\n\n               var vsOutput: VSOutput;\n               let xy = pos[vertexIndex];\n               vsOutput.position = vec4f(xy, 0.0, 1.0);\n               vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n               return vsOutput;\n            }\n\n            @group(0) @binding(0) var ourSampler: sampler;\n            @group(0) @binding(1) var ourTexture: texture_2d<f32>;\n\n            @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n               return textureSample(ourTexture, ourSampler, fsInput.texcoord);\n            }\n         `,\n      });\n\n      sampler = device.createSampler({\n         minFilter: 'linear',\n      });\n\n      perDeviceInfo.module = module;\n      perDeviceInfo.sampler = sampler;\n   }\n\n   if (!pipelineByFormat[texture.format]) {\n      pipelineByFormat[texture.format] = device.createRenderPipeline({\n         label: 'mip level generator pipeline',\n         layout: 'auto',\n         vertex: {\n            module,\n            entryPoint: 'vs',\n         },\n         fragment: {\n            module,\n            entryPoint: 'fs',\n            targets: [{ format: texture.format }],\n         },\n      });\n   }\n   const pipeline = pipelineByFormat[texture.format];\n\n   const encoder = device.createCommandEncoder({\n      label: 'mip gen encoder',\n   });\n\n   let width = texture.width;\n   let height = texture.height;\n   let baseMipLevel = 0;\n   while (width > 1 || height > 1) {\n      width = Math.max(1, width / 2 | 0);\n      height = Math.max(1, height / 2 | 0);\n\n      const bindGroup = device.createBindGroup({\n         layout: pipeline.getBindGroupLayout(0),\n         entries: [\n            { binding: 0, resource: sampler },\n            { binding: 1, resource: texture.createView({baseMipLevel, mipLevelCount: 1}) },\n         ],\n      });\n\n      ++baseMipLevel;\n\n      const renderPassDescriptor: GPURenderPassDescriptor = {\n         label: 'mip gen renderPass',\n         colorAttachments: [\n            {\n               view: texture.createView({baseMipLevel, mipLevelCount: 1}),\n               loadOp: 'clear',\n               storeOp: 'store',\n            },\n         ],\n      };\n\n      const pass = encoder.beginRenderPass(renderPassDescriptor);\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bindGroup);\n      pass.draw(3);\n      pass.end();\n   }\n\n   const commandBuffer = encoder.finish();\n   device.queue.submit([commandBuffer]);\n}","import {\n  generateMipmap,\n  numMipLevels,\n} from './generate-mipmap.js';\n\ntype CopyTextureOptions = {\n  flipY?: boolean,\n};\n\nexport function copySourceToTexture(\n    device: GPUDevice,\n    texture: GPUTexture,\n    source: GPUImageCopyExternalImage['source'],\n    {flipY}: CopyTextureOptions = {}) {\n  device.queue.copyExternalImageToTexture(\n    { source, flipY, },\n    { texture },\n    { width: source.width, height: source.height },\n  );\n\n  if (texture.mipLevelCount > 1) {\n    generateMipmap(device, texture);\n  }\n}\n\ntype CreateTextureOptions = CopyTextureOptions & {\n  mips?: boolean;\n  usage?: GPUTextureUsageFlags,\n  format?: GPUTextureFormat,\n};\n\nexport function getSizeFromSource(source: GPUImageCopyExternalImage['source']) {\n  if (source instanceof HTMLVideoElement) {\n    return [source.videoWidth, source.videoHeight];\n  } else {\n    return [source.width, source.height];\n  }\n}\n\nexport function createTextureFromSource(\n    device: GPUDevice,\n    source: GPUImageCopyExternalImage['source'],\n    options: CreateTextureOptions = {}) {\n  const size = getSizeFromSource(source);\n  const texture = device.createTexture({\n    format: options.format || 'rgba8unorm',\n    mipLevelCount: options.mips ? numMipLevels(size) : 1,\n    size,\n    usage: (options.usage ?? 0) |\n           GPUTextureUsage.TEXTURE_BINDING |\n           GPUTextureUsage.COPY_DST |\n           GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n  copySourceToTexture(device, texture, source, options);\n  return texture;\n}\n\ntype CreateTextureFromBitmapOptions = CreateTextureOptions & ImageBitmapOptions;\n\nexport async function loadImageBitmap(url: string, options: ImageBitmapOptions = {}) {\n  const res = await fetch(url);\n  const blob = await res.blob();\n  const opt: ImageBitmapOptions = {\n    ...options,\n    ...(options.colorSpaceConversion !== undefined && {colorSpaceConversion: 'none'}),\n  };\n  return await createImageBitmap(blob, opt);\n}\n\nexport async function createTextureFromImage(device: GPUDevice, url: string, options: CreateTextureFromBitmapOptions = {}) {\n  const imgBitmap = await loadImageBitmap(url);\n  return createTextureFromSource(device, imgBitmap, options);\n}\n"],"names":["isTypedArray","arr","length","buffer","ArrayBuffer","byteLength","b","i32","numElements","align","size","type","View","Int32Array","u32","Uint32Array","f32","Float32Array","f16","Uint16Array","vec2f","vec2i","vec2u","vec2h","vec3i","vec3u","vec3f","vec3h","vec4i","vec4u","vec4f","vec4h","mat2x2f","mat2x2h","mat3x2f","mat3x2h","mat4x2f","mat4x2h","mat2x3f","pad","mat2x3h","mat3x3f","mat3x3h","mat4x3f","mat4x3h","mat2x4f","mat2x4h","mat3x4f","mat3x4h","mat4x4f","mat4x4h","typeInfo","getSizeOfStructDef","fieldDef","Array","isArray","makeTypedArrayViews","structDef","arrayBuffer","offset","baseOffset","makeViews","map","elemDef","Error","fields","views","name","def","Object","entries","BYTES_PER_ELEMENT","setStructuredView","data","undefined","view","dataLen","stride","i","set","asArray","forEach","newValue","ndx","asViews","key","s_views","WeakMap","getView","Ctor","viewsByCtor","get","Map","getViewsByCtor","Node","constructor","isAstNode","astNodeType","evaluate","Statement","super","Function","args","returnType","body","this","StaticAssert","expression","While","condition","For","init","increment","Var","storage","access","value","Let","Const","IncrementOperator","AssignOperator","_a","TokenClass","parse","val","Increment","operator","variable","Assign","Call","Loop","continuing","Switch","If","elseif","_else","else","Return","Struct","members","Enable","Alias","Discard","Break","Continue","Type","TemplateType","format","PointerType","ArrayType","attributes","count","SamplerType","Expression","StringExpr","toString","CreateExpr","CallExpr","Math","sin","cos","tan","asin","acos","atan","PI","VariableExpr","ConstExpr","LiteralExpr","BitcastExpr","TypecastExpr","GroupingExpr","contents","Operator","UnaryOperator","right","BinaryOperator","left","SwitchCase","Case","selector","Default","Argument","ElseIf","Member","Attribute","TokenType","rule","TokenTypes","none","reserved","eof","token","asm","bf16","do","enum","f64","handle","i8","i16","i64","mat","premerge","regardless","typedef","u8","u16","u64","unless","using","vec","void","keywords","array","keyword","atomic","bool","mat2x2","mat2x3","mat2x4","mat3x2","mat3x3","mat3x4","mat4x2","mat4x3","mat4x4","ptr","sampler","sampler_comparison","struct","texture_1d","texture_2d","texture_2d_array","texture_3d","texture_cube","texture_cube_array","texture_multisampled_2d","texture_storage_1d","texture_storage_2d","texture_storage_2d_array","texture_storage_3d","texture_depth_2d","texture_depth_2d_array","texture_depth_cube","texture_depth_cube_array","texture_depth_multisampled_2d","vec2","vec3","vec4","bitcast","block","break","case","continue","default","discard","enable","fallthrough","false","fn","for","function","if","let","const","loop","while","private","read","read_write","return","switch","true","alias","uniform","var","workgroup","write","r8unorm","r8snorm","r8uint","r8sint","r16uint","r16sint","r16float","rg8unorm","rg8snorm","rg8uint","rg8sint","r32uint","r32sint","r32float","rg16uint","rg16sint","rg16float","rgba8unorm","rgba8unorm_srgb","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","bgra8unorm_srgb","rgb10a2unorm","rg11b10float","rg32uint","rg32sint","rg32float","rgba16uint","rgba16sint","rgba16float","rgba32uint","rgba32sint","rgba32float","static_assert","tokens","decimal_float_literal","hex_float_literal","int_literal","uint_literal","ident","and","and_and","arrow","attr","attr_left","attr_right","forward_slash","bang","bracket_left","bracket_right","brace_left","brace_right","colon","comma","equal","equal_equal","not_equal","greater_than","greater_than_equal","shift_right","less_than","less_than_equal","shift_left","modulo","minus","minus_minus","period","plus","plus_plus","or","or_or","paren_left","paren_right","semicolon","star","tilde","underscore","xor","plus_equal","minus_equal","times_equal","division_equal","modulo_equal","and_equal","or_equal","xor_equal","shift_right_equal","shift_left_equal","storage_class","access_mode","sampler_type","sampled_texture_type","multisampled_texture_type","storage_texture_type","depth_texture_type","any_texture_type","texel_format","const_literal","literal_or_ident","element_count_expression","template_types","attribute_name","assignment_operators","increment_operators","Token","lexeme","line","WgslScanner","source","_tokens","_start","_current","_line","_source","scanTokens","_isAtEnd","scanToken","push","_advance","_isWhitespace","_peekAhead","commentLevel","matchType","matchedType","_findType","foundLessThan","ti","indexOf","_addToken","lookAheadLexeme","lookAhead","maxLookAhead","li","_match","match","exec","index","c","amount","text","substring","WgslParser","_constants","tokensOrCode","_initialize","statements","statement","_global_decl_or_directive","scanner","_error","message","console","error","_peek","types","_check","l","_consume","tk","t","_previous","_type_alias","_enable_directive","attrs","_attribute","_var","_global_variable_decl","_let","_global_let_decl","_const","_global_const_decl","_struct","_struct_decl","_fn","_function_decl","argAttrs","typeAttrs","_type_decl","_return","_compound_statement","_statement","_if_statement","_switch_statement","_loop_statement","_for_statement","_while_statement","_static_assert_statement","result","_return_statement","_variable_statement","_increment_decrement_statement","_func_call_statement","_assignment_statement","_optional_paren_expression","_for_init","_short_circuit_or_expression","_for_increment","_variable_decl","savedPos","_unary_expression","decrement","isUnderscore","_argument_expression_list","s","_switch_body","cases","_case_selectors","_case_body","_cases","selectors","nextStatement","_elseif_statement","expr","_short_circuit_and_expr","_inclusive_or_expression","_exclusive_or_expression","_and_expression","_equality_expression","_relational_expression","_shift_expression","_additive_expression","_multiplicative_expression","_singular_expression","_primary_expression","p","_postfix_expression","postfix","has","v","parseFloat","_paren_expression","arg","memberAttrs","memberName","memberType","_const_expression","constValue","pointer","decl","_texture_sampler_types","countInt","parseInt","VariableInfo","node","group","binding","FunctionInfo","inputs","InputInfo","input","locationType","location","interpolation","MemberInfo","TypeInfo","BufferInfo","BindGropEntry","resource","EntryFunctions","vertex","fragment","compute","WgslReflect","code","structs","uniforms","textures","samplers","functions","aliases","initialize","parser","ast","entry","isUniformVar","g","getAttributeNum","isStorageVar","isTextureVar","isSamplerVar","_getInputs","vertexStage","getAttribute","fragmentStage","computeStage","stage","textureTypes","samplerTypes","defaultValue","a","obj","_getInputInfo","getStruct","info","_parseInt","_parseString","n","isNaN","u","getAlias","getBindGroups","groups","_makeRoom","getUniformBufferInfo","getStorageBufferInfo","_getUniformInfo","getStructInfo","_b","_c","_d","_e","lastSize","lastOffset","structAlign","mi","ml","member","getTypeInfo","_roundUp","max","isStruct","si","arrayStride","arrayCount","structInfo","explicitSize","explicitAlign","divisor","E","m","k","ceil","addMember","reflect","fill","_","addMembers","fromEntries","normalizeGPUExtent3D","from","width","height","depthOrArrayLayers","normalizeGPUExtent3Dict","numMipLevels","sizes","maxSize","log2","byDevice","generateMipmap","device","texture","perDeviceInfo","pipelineByFormat","module","createShaderModule","label","createSampler","minFilter","createRenderPipeline","layout","entryPoint","targets","pipeline","encoder","createCommandEncoder","baseMipLevel","bindGroup","createBindGroup","getBindGroupLayout","createView","mipLevelCount","renderPassDescriptor","colorAttachments","loadOp","storeOp","pass","beginRenderPass","setPipeline","setBindGroup","draw","end","commandBuffer","finish","queue","submit","copySourceToTexture","flipY","copyExternalImageToTexture","getSizeFromSource","HTMLVideoElement","videoWidth","videoHeight","createTextureFromSource","options","createTexture","mips","usage","GPUTextureUsage","TEXTURE_BINDING","COPY_DST","RENDER_ATTACHMENT","async","loadImageBitmap","url","res","fetch","blob","opt","colorSpaceConversion","createImageBitmap","byteOffset","sizeInBytes","alignment","multiple","numBytes","storages","setStructuredValues","asIntrinsicDefinition","asStructDefinition"],"mappings":"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"}